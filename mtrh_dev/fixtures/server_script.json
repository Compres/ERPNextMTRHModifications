[
 {
  "allow_guest": 0,
  "api_method": "request_for_quotation",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-11 23:35:17.321059",
  "name": "RFQ - Get Suppliers & Items on Item Group",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "#GET VARIABLES PASSED IN\nvar_item_group = frappe.form_dict.item_group\n\n#GET PARENT - MATERIAL REQUEST - SINCE PERMISSIONS APPLY HERE.\nmaterial_requests = frappe.db.get_list('Material Request',\n    filters={\n        'docstatus': 1,\n        'per_ordered': ['<', 99.99],\n        'status': ['!=', 'Stopped'],\n        'material_request_type': 'Purchase'\n    },\n    fields=['name'],\n    order_by='creation desc',\n    #ignore_permissions = True,\n    as_list=False\n)\n\nlist_materialrequests = []\nfor mr in material_requests:\n    list_materialrequests.append(str(mr.name))\n    \n#frappe.response['material_requests'] = list_materialrequests\n\n#Step 1 get pending items\nmr_items = frappe.get_list('Material Request Item',\n    filters={\n        'docstatus': 1,\n        'parent': [\"IN\", list_materialrequests],\n        'item_group': [\"IN\", var_item_group]\n    },\n    fields=\"`tabMaterial Request Item`.item_code, `tabMaterial Request Item`.item_name,`tabMaterial Request Item`.procurement_method, sum(`tabMaterial Request Item`.qty) as quantity, `tabMaterial Request Item`.ordered_qty, `tabMaterial Request Item`.item_group, `tabMaterial Request Item`.warehouse, `tabMaterial Request Item`.uom, `tabMaterial Request Item`.description, `tabMaterial Request Item`.parent\",\n    group_by='item_code',\n    order_by='creation',\n    #page_length=2000\n    ignore_permissions = True,\n    #as_list=False\n)\n\n#frappe.response['items'] = mr_items\n#mr_items\n\nlist_item_codes = []\nfor mr_item in mr_items:\n    list_item_codes.append(str(mr_item.item_code))\n\n#GET THE AWARDED SUPPLIERS FOR THE LISTED ITEMS\nawarded_items = frappe.db.get_list('Item Default',\n    filters={\n     'parent': [\"IN\", list_item_codes],\n     'default_supplier': ['!=', '']\n    },\n    fields=[\"parent\"],\n    ignore_permissions = True,\n    as_list=False\n)\n    \n#frappe.response['awarded_items'] = awarded_items\n\nlist_awarded_item_codes = []\nfor awarded_item in awarded_items:\n    list_awarded_item_codes.append(str(awarded_item.parent))\n\nnonawarded_items = []\nfor mr_item in mr_items:\n    #if(awarded_item.parent == mr_item.item_code):\n    if mr_item.item_code not in list_awarded_item_codes:\n        nonawarded_items.append(mr_item)\n\nfrappe.response['filtered_items'] = nonawarded_items\n#==============================================================================\n#=====================================================================================\n#UNIQUE MATERIAL REQUESTS\nunique_material_requests = []\nfor mr_item in nonawarded_items:\n    if mr_item.parent not in unique_material_requests:\n        unique_material_requests.append(mr_item.parent)\n\nfrappe.response['material_requests'] = unique_material_requests\n\n#=====================================================================================\n#GET SUPPLIERS FOR THIS ITEM GROUP AS WELL.\nsuppliers_for_group = frappe.db.get_list('Prequalification Supplier',\n    filters={\n        #'parent': [\"IN\", var_item_group],#We changed the naming convention for parent so this won't work, hence below\n        'item_group_name': [\"IN\", var_item_group],\n        \"docstatus\":\"1\"\n    },\n    fields=[\"supplier_name\"],\n    ignore_permissions = True,\n    as_list=False\n)\n#=====================================================================================\n#GET SUPPLIERS WITH CONTACTS. REMOVE SUPPLIERS IF ITEMS EMPTY\n\nsupplier_full_set = []\nif len(nonawarded_items) > 0 :\n    supplier_json_object={}\n    for supplier in suppliers_for_group:\n        contact = frappe.db.get_value(\"Dynamic Link\", {\"link_doctype\":\"Supplier\", \"link_title\":supplier.supplier_name, \"parenttype\":\"Contact\"} ,\"parent\")\n        email = frappe.db.get_value(\"Contact\", contact, \"email_id\")\n        supplier_json_object[\"supplier_name\"]=supplier.supplier_name\n        supplier_json_object[\"contact\"]=contact\n        supplier_json_object[\"email\"]=email\n        supplier_full_set.append(supplier_json_object)\n        \nfrappe.response['suppliers_for_group'] = supplier_full_set\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "suppliers_with_mr_items",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-04-25 19:36:28.210924",
  "name": "Suppliers with Material Request Items",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "#GET PARENT - MATERIAL REQUEST - SINCE PERMISSIONS APPLY HERE.\nmaterial_requests = frappe.db.get_list('Material Request',\n    filters={\n        'docstatus': 1\n    },\n    fields=['name'],\n    order_by='creation desc'\n)\nlisparent = []\nfor mr in material_requests:\n    lisparent.append(str(mr.name))\n\n\n#Step 1 get pending items\nitems_pending = frappe.db.get_list('Material Request Item',\n    filters={\n        'docstatus': 1,\n        'parent': [\"IN\", lisparent],\n    },\n    fields=['item_code'],\n    group_by='item_code',\n    order_by='creation desc',\n    #page_length=2000\n    #ignore_permissions = False\n    #as_list=True\n)\n\nlis = []\nfor itemcode in items_pending:\n    lis.append(str(itemcode.item_code))\n\n#frappe.response['items']= lis\n#Step 2 Get Suppliers\nsuppliers = frappe.db.get_list('Item Default',\n    filters={\n        'parent': [\"IN\", lis], \n        'default_supplier':[\"!=\", \"\"]\n    },\n    fields=['default_supplier'],\n    group_by='default_supplier',\n    page_length=10,\n    #as_list=True\n)\nsupplier_arr=[]\nfor suppliername in suppliers:\n    supplier_arr.append(suppliername.default_supplier)\nfrappe.response['suppliers']=supplier_arr",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "default_item_price",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-12 23:35:03.427229",
  "name": "Default Item Price",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "#RETURNS ITEM PRICE BASED ON DEFAULT PRICE LIST SET FOR AN ITEM\nitem = frappe.form_dict.item_code\n#1. GET DEFAULT PRICELIST\ndefault_pricelist = frappe.db.get_value('Item Default', {'parent': item}, 'default_price_list')\n\n#2. GET ITEM PRICE AS PER THE DEFAULT PRICE LIST OBTAINED\nitem_price = frappe.db.get_value('Item Price',  {'item_code': item,'price_list': default_pricelist}, 'price_list_rate')\n#=================================================================\nitem_code_number = frappe.form_dict.item_num\nrfqnumber = frappe.form_dict.rfqno\nitem_number = frappe.db.get_value('Tender Quotations Evaluations',  {'item_name': item_code_number,'rfq_no': rfqnumber}, 'item_name')\n#==========================================================\n#3.RETURN THE PRICE AS DE FACTO PRICE\n#4 ALSO RETURN PROCUREMENT DEFAULTS\nitem_group = frappe.db.get_value('Item', {'item_code': item}, 'item_group')\n#Step 2 Get Suppliers\nprocurement_defaults = frappe.db.get_list('Item Default',\n    filters={\n       \"parent\":item_group\n    },\n    fields=[\"procurement_method\",\"source_of_funds\",\"inviteadvertise_tender\",\"bid_opening\",\"bid_evaluation\",\"tender_award\",\"notification_of_award\",\"contract_signing\",\"total_time_to_contract_signature\",\"date_for_completion_of_contract\"],\n    page_length=1,\n    #as_list=True\n)\n\nfrappe.response[\"procurement\"]=procurement_defaults\n\nfrappe.response[\"message\"]=item_price\nfrappe.response[\"existingitem\"]=item_number",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "validate_procurement_plan",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-04-22 16:16:13.514490",
  "name": "Procurement Plan Validation",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "department = frappe.form_dict.department\nfiscal_year = frappe.form_dict.fiscal_year\ndocument_name = frappe.form_dict.document_name\n\n#Step count of drafts and submitted documents\nexists =  frappe.get_list('Procurement Plan Item',\n    filters={\n        'docstatus': \"!=2\",\n        'department_name': department,\n        'fs_yr': fiscal_year,\n        'name': [\"!=\", document_name]\n    },\n    fields=\"count(`tabProcurement Plan Item`.name) as quantity\",\n    order_by='creation',\n    #page_length=2000\n    ignore_permissions = True,\n    #as_list=False\n)\n\nfrappe.response[\"message\"]= exists;",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "prequalification_duplicate_checker",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-04-23 12:06:25.367289",
  "name": "Prequalification Duplicate Checker",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "item_group = frappe.form_dict.item_group\ndocument_name = frappe.form_dict.document_name\n\n#Step count of drafts and submitted documents\nexists =  frappe.get_list('Prequalification',\n    filters={\n        'docstatus': \"!=2\",\n        'item_group': item_group,\n        'name': [\"!=\", document_name],\n        \"workflow_state\": [\"!=\", \"Rejected\"]\n    },\n    fields=\"count(`tabPrequalification`.name) as quantity\",\n    order_by='creation',\n    #page_length=2000\n    ignore_permissions = True,\n    #as_list=False\n)\n\nfrappe.response[\"message\"]= exists;",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "purchasing_script",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-04-23 22:46:37.366352",
  "name": "Pending Supplier Filter",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "#GET PARENT - MATERIAL REQUEST - SINCE PERMISSIONS APPLY HERE.\nmaterial_requests = frappe.db.get_list('Material Request',\n    filters={\n        'docstatus': 1\n    },\n    fields=['name'],\n    order_by='creation desc'\n)\nlisparent = []\nfor mr in material_requests:\n    lisparent.append(str(mr.name))\n\n\n#Step 1 get pending items\nitems_pending = frappe.db.get_list('Material Request Item',\n    filters={\n        'docstatus': 1,\n        'parent': [\"IN\", lisparent],\n    },\n    fields=['item_code'],\n    group_by='item_code',\n    order_by='creation desc',\n    #page_length=2000\n    #ignore_permissions = False\n    #as_list=True\n)\n#frappe.response['suppliers']=items_pending\n\nlis = []\nfor itemcode in items_pending:\n    lis.append(str(itemcode.item_code))\n\n#frappe.response['items']= lis\n#Step 2 Get Suppliers\nsuppliers = frappe.db.get_list('Item Default',\n    filters={\n        'parent': [\"IN\", lis], \n        'default_supplier':[\"!=\", \"\"]\n    },\n    fields=['default_supplier'],\n    group_by='default_supplier',\n    page_length=10,\n    #as_list=True\n)\nsupplier_arr=[]\nsupplier_json_obj ={}\nfor suppliername in suppliers:\n    supplier_json_obj[\"suppliers\"]=suppliername.default_supplier\n    supplier_arr.append(supplier_json_obj)\nfrappe.response['message']=supplier_arr",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "purchase_order_budget_check",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-12 23:58:19.283028",
  "name": "Budget Check Puchase Order",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "#RETURNS TRUE IF THERE IS A BUDGET\r\nfiscal_year = frappe.form_dict.fiscal_year\r\npayload =  frappe.form_dict.payload\r\noutputArr = []\r\ndepartment = \"\"\r\nbalance_valid = \"\"\r\n#a Get Fiscal Year parameters\r\nfiscal_year_starts = frappe.db.get_value('Fiscal Year', {\"year\": fiscal_year}, 'year_start_date')\r\nfiscal_year_ends   = frappe.db.get_value('Fiscal Year', {\"year\": fiscal_year}, 'year_end_date')\r\n\r\npayload_to_use = json.loads(payload)\r\n\r\nfor itemrow in payload_to_use:\r\n    department = itemrow[\"department\"]\r\n    expense_account = itemrow[\"expense_account\"]\r\n    amount = itemrow[\"amount\"]\r\n    \r\n    #1 GET BUDGET ID\r\n    budget = frappe.db.get_value('Budget', {'department': department,\"fiscal_year\": fiscal_year, \"docstatus\":\"1\"}, 'name')\r\n    \r\n    #2 GET BUDGET AMOUNT:\r\n    budget_amount = frappe.db.get_value('Budget Account', {'parent':budget, \"account\":expense_account, \"docstatus\":\"1\"}, 'budget_amount')\r\n    \r\n    #3. GET SUM OF ALL APPROVED PURCHASE ORDERS: \r\n    total_commitments =  frappe.get_list('Purchase Order Item',\r\n        filters={\r\n            'docstatus': 1,\r\n            'department':department,\r\n            'expense_account':expense_account,\r\n             \"creation\": [\">=\", fiscal_year_starts],\r\n             \"creation\": [\"<=\", fiscal_year_ends],\r\n             \"docstatus\": \"==1\"\r\n        },\r\n        fields=\"sum(`tabPurchase Order Item`.amount) as total_amount\",\r\n        order_by='creation',\r\n        #page_length=2000\r\n        ignore_permissions = True,\r\n        #as_list=False\r\n    )\r\n    amounts_commited = []\r\n    for amt in total_commitments:\r\n        amounts_commited.append(amt)\r\n    commitments = total_commitments[0].total_amount\r\n    if commitments is None:\r\n        commitments =0.0\r\n    if budget_amount is None:\r\n        budget_amount =0.0\r\n    balance = float(budget_amount) - float(commitments)\r\n    \r\n    if(balance < amount ):\r\n        balance_valid = \"no\"\r\n        #frappe.msgprint(\"\"\"Sorry, this order will not proceed because requests for Department\"\"\"+department+\"\"\"Expense account\"\"\"+expense_account+\"\"\" exceed the current vote which has a balance of \"\"\"+str(balance)+\"\"\".\"\"\")\r\n    else:\r\n        balance_valid = \"yes\"\r\n        \r\n    itemrow[\"department\"] = department\r\n    itemrow[\"expense_account\"] = expense_account\r\n    itemrow[\"this_amount\"] = amount\r\n    itemrow[\"committed\"] = commitments\r\n    itemrow[\"budget_amount\"] = budget_amount\r\n    itemrow[\"balance\"] = balance\r\n    itemrow[\"balance_valid\"] = balance_valid\r\n    outputArr.append(itemrow)\r\n\r\nfrappe.response[\"message\"] = outputArr",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_employee_details",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-04-27 17:15:41.588995",
  "name": "Request for Quotation Employee Details",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "",
  "script": "#GET VARIABLES PASSED IN FROM USER\nuserid = frappe.form_dict.user\nemployeedetails = frappe.db.get_list('Employee',\n    filters={\n        'name':userid\n    },\n    fields=['prefered_email','employee_name'],\n    ignore_permissions = True,\n    as_list=False\n)\nfrappe.response['employeedetails']=employeedetails",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "tqe_password_check",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-14 22:09:39.778996",
  "name": "TQE Password Check",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "",
  "script": "refnum =frappe.form_dict.rfnum\r\nloggedinusers = frappe.get_list('Request For Quotation Adhoc Committee',\r\n        filters={\r\n            'logged_in': 1,\r\n            'parent':refnum,\r\n        },\r\n        fields=\"count(*) as loggedinusers\",\r\n        order_by='creation',\r\n        #page_length=2000\r\n        ignore_permissions = True,\r\n        #as_list=False\r\n    )\r\nprocurement_method =  frappe.db.get_value('Request for Quotation', refnum, 'mode_of_procurement')\r\nmethod_arr =[]\r\nmethod_arr.append(procurement_method)\r\nfrappe.response[\"mode\"]=procurement_method\r\nfrappe.response[\"message\"]=loggedinusers\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "tqe_password_validation",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-04 16:20:37.642704",
  "name": "TQE Password Validation",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "entered_password = frappe.form_dict.password\nrefnum=frappe.form_dict.refnum\n\nserver_response =\"invalid\" #Set the response initially to invalid\n\n#Check the current count of passwords entered\nentries = frappe.get_list('Request For Quotation Adhoc Committee',\n        filters={\n            'logged_in': 1,\n            'parent':refnum,\n        },\n        fields=\"count(*) as loggedinusers\",\n        order_by='creation',\n        #page_length=2000\n        ignore_permissions = True,\n        #as_list=False\n    )\ncount = entries[0].loggedinusers + 1\n\n#1. Check if password is valid\n\npassword_valid = frappe.db.get_value('Request For Quotation Adhoc Committee', {'parent':refnum, \"user_password\": entered_password, \"docstatus\":\"1\"}, 'user_password')\n\n#2. Check if password was entered\n\npassword_entered = frappe.db.get_value('Request For Quotation Adhoc Committee', {'parent':refnum, \"user_password\": entered_password,'logged_in': 1, \"docstatus\":\"1\"}, 'user_password')\n\nif password_valid is not None and password_entered is None: #if we have a retuned password and a null entry for the logged in status, and atleast 3 people (me included) have signed\n    parent = frappe.get_doc('Request for Quotation', refnum)\n    docname = frappe.db.get_value('Request For Quotation Adhoc Committee', {'parent':refnum, \"user_password\": entered_password, \"docstatus\":\"1\"}, 'name')\n    doc = frappe.get_doc('Request For Quotation Adhoc Committee', docname)\n    doc.logged_in=\"1\"\n    employee_name = doc.employee_name\n    parent.add_comment('Edit', text=employee_name+' unlocked the document '+refnum+' with their password')\n    doc.save()\n    server_response=\"valid\"\n    frappe.msgprint(\"Success, you have correctly entered your password to open \"+refnum+\". Please note that it cannnot be reused\")\nelse:\n    server_response=\"invalid\"\n    frappe.msgprint(msg=\"Sorry, you have used a wrong password or used a password that has already been used to open \"+refnum,\n    title='Error')\nfrappe.response[\"message\"]=server_response\n    \n    \n    \n    ",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "getprocurementmethod",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-04-30 00:15:12.141683",
  "name": "Material Request Procurement Method",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "",
  "script": "department =frappe.form_dict.department\nitemcode=frappe.form_dict.itemcode\nfiscalyear=frappe.form_dict.fiscalyear\n\nprocname=frappe.db.get_value('Procurement Plan', {'fiscal_year':fiscalyear, \"department_name\":department, \"docstatus\":\"1\",\"status\":\"Approved\"}, 'name')\n\nprocmethod=frappe.db.get_value('Procurement Plan Item', {'parent':procname,\"item_code\":itemcode,\"docstatus\":\"1\"}, 'procurement_method')\n\nfrappe.response[\"message\"]=procmethod\n\n#=============================================================fetching qty from procurement plan\nitemn=frappe.form_dict.itemnum\nfsyear=frappe.form_dict.fyr\nqtyy=frappe.db.get_value('Procurement Plan Item', {'fs_yr':fsyear,\"item_code\":itemn,\"docstatus\":\"1\"}, 'qty')\nfrappe.response[\"qty\"]=qtyy\n#**************************************************************************end",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "tqe_sqtn_filter_by_item",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-12 12:18:14.760751",
  "name": "TQE Get Supplier Quotations by item",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "item_code = frappe.form_dict.item_code\nreference_number = frappe.form_dict.reference_number #Can be Tender Number or Quotation Number\n\n#GET SUPPLIER QUOTATIONS FOR AN ITEM.\nsupplier_quotations = frappe.db.get_list('Supplier Quotation Item',\n    filters={\n        \"item_code\": item_code,\n        \"request_for_quotation\": reference_number,\n        \"docstatus\":\"0\",\n    },\n    fields= [\"item_name\", \"item_code\", \"request_for_quotation\", \"parent\", \"rate\", \"uom\", \"brand\",\"request_for_quotation\",\"attachments\"],\n    order_by='creation desc',\n    ignore_permissions = True,\n    as_list=False\n)\n\n\n#GET EVALUATED BIDS.\nentered_bids = frappe.db.get_list('Requests For Quotations',\n    filters={\n        \"item_code\":item_code,\n        \"quotation_number\": reference_number,\n        \"chosen_supplier\":1\n    },\n    fields= [\"item_name\", \"item_code\", \"bidder\",\"rate_bidder\", \"item_price\", \"uom\", \"brand\"],\n    order_by='creation desc',\n    ignore_permissions = 1,\n    as_list=False\n)\n\n\nfrappe.response[\"bids\"]=entered_bids\nfrappe.response[\"message\"]=supplier_quotations\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "rfq_items_suppliers_filters",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-13 00:52:13.171355",
  "name": "RFQ Get Suppliers & Items V2",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "item_group = frappe.form_dict.item_group\n\n#GET PARENT - ALL UNATTENDED MATERIAL REQUESTS (PURCHASE,TRANSFER, ISSUE etc)\nmaterial_requests = frappe.db.get_list(\"Material Request Item\",\n    filters={\n       \"docstatus\": \"1\",\n        \"attended_to\":\"0\",\n        \"item_group\": item_group\n    },\n    fields=[\"parent\"],\n    order_by=\"creation desc\",\n    ignore_permissions = True,\n    as_list=False\n)\nunfiltered_material_requests = []\nfor mr in material_requests:\n    unfiltered_material_requests.append(str(mr.parent))\n####RETURN A FILTERED LIST\nf_material_requests = frappe.db.get_list(\"Material Request\",\n    filters={\n       \"docstatus\": \"1\",\n        'status': ['!=', 'Stopped'],\n        'material_request_type': 'Purchase',\n        \"name\":[\"IN\", unfiltered_material_requests ]\n    },\n    fields=[\"name\"],\n    order_by=\"creation desc\",\n    ignore_permissions = True,\n    as_list=False\n)\nfiltered_material_requests=[]\nfor mr in f_material_requests:\n    filtered_material_requests.append(str(mr.name))\n\n#STEP 2 RETURN FIELDS\nmr_items = frappe.get_list(\"Material Request Item\",\n    filters={\n        \"docstatus\": 1,\n        \"attended_to\":0,\n        \"parent\": [\"IN\", filtered_material_requests]\n    },\n    fields=\"`tabMaterial Request Item`.item_code, `tabMaterial Request Item`.item_name,`tabMaterial Request Item`.procurement_method, sum(`tabMaterial Request Item`.qty) as quantity, `tabMaterial Request Item`.ordered_qty, `tabMaterial Request Item`.item_group, `tabMaterial Request Item`.warehouse, `tabMaterial Request Item`.uom, `tabMaterial Request Item`.description, `tabMaterial Request Item`.parent\",\n    group_by=\"item_code\",\n    order_by=\"creation\",\n    #page_length=2000\n    ignore_permissions = True,\n    #as_list=False\n)\n#FURTHER NARROW DOWN THIS ITEM LIST TO UNAWARDED ITEMS\nunawarded_list =[]\nfor item in mr_items:\n    unawarded = frappe.db.exists({\n\t\t\t\t\"doctype\":\"Item Default\",\n\t\t\t\t\"parent\": item.item_code,\n\t\t\t\t\"default_supplier\": \"\" \n\t\t\t})\n\tif unawarded:\n\t    unawarded_list.append(str(item.item_code))\n#RUN THE SCRIPTS AGAIN FILTERING WITH UNAWARDED ITEMS\nmr_items_filtered = frappe.get_list(\"Material Request Item\",\n    filters={\n        \"docstatus\": 1,\n        \"attended_to\":0,\n        \"parent\": [\"IN\", filtered_material_requests],\n        \"item_code\"[\"IN\", unawarded_list]\n    },\n    fields=\"`tabMaterial Request Item`.item_code, `tabMaterial Request Item`.item_name,`tabMaterial Request Item`.procurement_method, sum(`tabMaterial Request Item`.qty) as quantity, `tabMaterial Request Item`.ordered_qty, `tabMaterial Request Item`.item_group, `tabMaterial Request Item`.warehouse, `tabMaterial Request Item`.uom, `tabMaterial Request Item`.description, `tabMaterial Request Item`.parent\",\n    group_by=\"item_code\",\n    order_by=\"creation\",\n    #page_length=2000\n    ignore_permissions = True,\n    #as_list=False\n)\t    \n\t    \n\n#STEP 3 RETURN PREQUALIFICATION LIST FOR ITEM CATEGORY\n#===============================\n#GET SUPPLIERS FOR THIS ITEM GROUP AS WELL.\nsuppliers_for_group = frappe.db.get_list(\"Prequalification Supplier\",\n    filters={\n        \"item_group_name\": [\"IN\", item_group],\n        \"docstatus\":\"1\"\n    },\n    fields=[\"supplier_name\"],\n    ignore_permissions = True,\n    as_list=False\n)\n#=====================================================================================\n#GET SUPPLIERS WITH CONTACTS. REMOVE SUPPLIERS IF ITEMS EMPTY\nsupplier_full_set = []\nsupplier_json_object={}\nfor supplier in suppliers_for_group:\n    contact = frappe.db.get_value(\"Dynamic Link\", {\"link_doctype\":\"Supplier\", \"link_title\":supplier.supplier_name, \"parenttype\":\"Contact\"} ,\"parent\")\n    email = frappe.db.get_value(\"Contact\", contact, \"email_id\")\n    supplier_json_object[\"supplier_name\"]=supplier.supplier_name\n    supplier_json_object[\"contact\"]=contact\n    supplier_json_object[\"email\"]=email\n    supplier_full_set.append(supplier_json_object)\n\nfrappe.response[\"suppliers_for_group\"] = supplier_full_set\nfrappe.response[\"filtered_items\"] =mr_items\nfrappe.response[\"material_requests\"] = unfiltered_material_requests\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "modified": "2020-05-12 09:37:09.157960",
  "name": "Update Material Request Item Attended To",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Request for Quotation",
  "script": "rfq = doc.name\n\nmaterial_requests = doc.material_requests\nitems = doc.items\nmreq_arr =[]\nitems_arrs =[]\nfor mr in material_requests:\n    mreq_arr.append(mr.material_request)\nfor item in items:\n    items_arrs.append(item.item_code)\n\ndocnames = frappe.db.get_list('Material Request Item',\n    filters={\n        'parent': [\"IN\", mreq_arr], \n        'item_code': [\"IN\", items_arrs], \n    },\n    fields=['name'],\n    #as_list=True\n)\n\nfor cdname in docnames:\n    frappe.msgprint(\"I will update \"+str(cdname.name))\n    frappe.db.set_value('Material Request Item', cdname.name, 'attended_to', \"1\")\n\n\n\n\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "rfq_items_suppliers_mrqs",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-13 10:39:57.592359",
  "name": "RFQ Get Suppliers & Items V3",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "",
  "script": "item_group = frappe.form_dict.item_group\n\n#GET ALL UNATTENDED MATERIAL REQUEST ITEMS (PURCHASE,TRANSFER, ISSUE etc) FOR THIS GROUP ONLY\nunattended_item_codes = frappe.db.get_list(\"Material Request Item\",\n    filters={\n       \"docstatus\": \"1\",\n        \"attended_to\":\"0\",\n        \"item_group\": item_group\n    },\n    fields=[\"item_code\"],\n    order_by=\"creation desc\",\n    ignore_permissions = True,\n    as_list=False\n)\nif unattended_item_codes:\n    #Now build an unattended array of non-awarded items only\n    unnattended_arr =[]\n    for unattended in unattended_item_codes:\n        unawarded = frappe.db.exists({\n    \t\t\t\t\"doctype\":\"Item Default\",\n    \t\t\t\t\"parent\": unattended.item_code,\n    \t\t\t\t\"default_supplier\":\"\"\n    \t            })\n        if unawarded:\n        \t    unnattended_arr.append(unattended.item_code)\n    #BUILD A ITEMS PAYLOAD NOW\n    mr_items_filtered = frappe.get_list(\"Material Request Item\",\n        filters={\n            \"docstatus\": 1,\n            \"attended_to\":0,\n            \"item_group\": item_group,\n            \"item_code\": [\"IN\", unnattended_arr]\n        },\n        fields=\"`tabMaterial Request Item`.item_code, `tabMaterial Request Item`.item_name,`tabMaterial Request Item`.procurement_method, sum(`tabMaterial Request Item`.qty) as quantity, `tabMaterial Request Item`.ordered_qty, `tabMaterial Request Item`.item_group, `tabMaterial Request Item`.warehouse, `tabMaterial Request Item`.uom, `tabMaterial Request Item`.description, `tabMaterial Request Item`.parent\",\n        group_by=\"item_code\",\n        order_by=\"creation\",\n        #page_length=2000\n        ignore_permissions = True,\n        #as_list=False\n    )\n    #BUILD A MATERIAL REQUEST LIST PAYLOAD NOW\n    mr_list_filtered = frappe.get_list(\"Material Request Item\",\n        filters={\n            \"docstatus\": 1,\n            \"attended_to\":0,\n            \"item_group\": item_group,\n            \"item_code\": [\"IN\", unnattended_arr]\n        },\n        fields=[\"parent\"],\n        order_by=\"creation\",\n        #page_length=2000\n        ignore_permissions = True,\n        #as_list=False\n    )\n    \n    #BUILD A PREQUALIFICATION SUPPLIER PAYLOAD\n    \n    #STEP 3 RETURN PREQUALIFICATION LIST FOR ITEM CATEGORY\n    #===============================\n    #GET SUPPLIERS FOR THIS ITEM GROUP AS WELL.\n    suppliers_for_group = frappe.db.get_list(\"Prequalification Supplier\",\n        filters={\n            \"item_group_name\": [\"IN\", item_group],\n            \"docstatus\":\"1\"\n        },\n        fields=[\"supplier_name\"],\n        ignore_permissions = True,\n        as_list=False\n    )\n    #=====================================================================================\n    #GET SUPPLIERS WITH CONTACTS. REMOVE SUPPLIERS IF ITEMS EMPTY\n    supplier_full_set = []\n    supplier_json_object={}\n    for supplier in suppliers_for_group:\n        contact = frappe.db.get_value(\"Dynamic Link\", {\"link_doctype\":\"Supplier\", \"link_title\":supplier.supplier_name, \"parenttype\":\"Contact\"} ,\"parent\")\n        email = frappe.db.get_value(\"Contact\", contact, \"email_id\")\n        supplier_json_object[\"supplier_name\"]=supplier.supplier_name\n        supplier_json_object[\"contact\"]=contact\n        supplier_json_object[\"email\"]=email\n        supplier_full_set.append(supplier_json_object)\n    \n    frappe.response[\"suppliers_for_group\"] = supplier_full_set\n    frappe.response[\"filtered_items\"] =mr_items_filtered\n    frappe.response[\"material_requests\"] = mr_list_filtered\nelse:\n    frappe.response[\"suppliers_for_group\"] = \"\"\n    frappe.response[\"filtered_items\"] = \"\"\n    frappe.response[\"material_requests\"] = \"\"\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "rfq_mode_of_purchase",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-14 22:00:07.076244",
  "name": "RFQ mode of purchase",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "rfq = frappe.form_dict.rfq_no\n\nprocurement_method =  frappe.db.get_value('Request for Quotation', rfq, 'mode_of_procurement')\n\nfrappe.response[\"mode\"]=procurement_method",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "item_params",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-20 17:26:28.333899",
  "name": "Item Params",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "item = frappe.form_dict.item_code\n\ndoc_object = frappe.get_doc('Item', item)\n\nfrappe.response[\"item_dict\"] = doc_object",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "check_for_inspection_template",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-20 23:24:37.761079",
  "name": "Check If Inspection Template Exists",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "items = frappe.form_dict.item_codes\npayload_to_use = json.loads(items)\nstatus =\"\"\nitems_without_template = frappe.db.get_list(\"Item\",\n    filters={\n        'quality_inspection_template':[\"=\",\"\"],\n        'item_code': ['IN',payload_to_use],\n    },\n    fields=[\"item_code\"],\n    order_by=\"creation desc\",\n    ignore_permissions = True,\n    as_list=False\n)\nitemsarr =[]\nfor item in items_without_template:\n    itemsarr.append(item.item_code)\nif not items_without_template:\n    frappe.response[\"status\"] = \"ok\"\nelse:\n    frappe.response[\"status\"] = \"not ok\"\nfrappe.response[\"items_payload\"] = payload_to_use\nfrappe.response[\"items_without_inspection_template\"] = itemsarr\n\n\n        ",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "document_info",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-05-21 14:41:48.290388",
  "name": "Doctype Info",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "doctype = frappe.form_dict.doctype\ndocname = frappe.form_dict.docname\n\n\ndoc_object = frappe.get_doc(doctype, docname)\n\nfrappe.response[\"message\"] = doc_object",
  "script_type": "API"
 }
]