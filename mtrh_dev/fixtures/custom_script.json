[
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Order",
  "modified": "2020-05-27 01:29:25.029019",
  "name": "Purchase Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "var mrq_nosArr=[];\nvar item_codesArr=[];\nvar supplier_listArr =[]; \nvar approvedordersArr=[];\nvar itemsapprovedArr=[];\nvar codes_Arr=[];\nvar supplistArr=[];\nvar mrArr=[];\nvar  fiscal_year;\nvar year_start;var year_end;\nvar departmentarray =[];\nvar sumpendsubmittedlpos;\nvar burgetid;\nvar userdept= \"\";\nvar budget_validated = true;\nvar balance;\nvar this_amount;\nvar payload = [];\nvar budgetDashboardSection;\n\nfrappe.ui.form.on('Purchase Order', {\n    onload: function(frm){\n\t\tfrappe.call({\n            method:\"frappe.client.get_list\",\n            args: {\n                doctype:\"Fiscal Year\",\n                filters:[\n                    {disabled: false}\n                ],\n                fields: [\"year\",\"year_start_date\",\"year_end_date\"],\n            },\n            callback: function(fiscal_yr){\n                fiscal_year = fiscal_yr.message[0].year;\n                year_start = fiscal_yr.message[0].year_start_date;\n                year_end = fiscal_yr.message[0].year_end_date;\n                console.log(\"Setting \"+fiscal_year+\" to start \"+year_start+\" to \"+year_end);\n            }\n       });\n       \n       \n       \n       //frm.dashboard.reset();\n       \n\t},\n\tonload_post_render: function(frm){\n\t   //CREATE THE PAYLOAD FOR SUBSEQUENT USE.\n\t   \n\t},\n\tafter_save: function(frm){\n\t    if (frm.doc.workflow_state && frm.doc.workflow_state.indexOf(\"Approved\") > 0){\n\t        frappe.msgprint(\"This wont work!\");\n\t        validated = false;\n\t    }\n\t},\n    \n    refresh:function(frm){\n        console.log(\"POST RENDER...\")\n       var purchase_order_items = frm.doc.items;\n\t    var deptArr =[];\n\t    var expAccArr=[];\n\t    var total=0.0;\n\t    console.log(JSON.stringify(purchase_order_items));\n\t   /**/\n\t   for(var p = 0;p<purchase_order_items.length;p++) {\n\t         var department = purchase_order_items[p].department;\n\t         var expense_account = purchase_order_items[p].expense_account;\n\t         if(deptArr.indexOf(department)<0) deptArr.push(department) ;//We need to get a distinct list of departments\n\t         if(expAccArr.indexOf(expense_account)<0) expAccArr.push(expense_account) ;//We need to get a distinct list of expense accounts\n\t         \n\t         console.log(\"Department array length :\"+deptArr.length);\n\t         console.log(\"Expense Account array length :\"+expAccArr.length);\n        }\n       \n       var row={};\n       payload = [];\n       for(var d=0;d<deptArr.length;d++){\n            for(var e=0;e<expAccArr.length;e++){\n                var dpt = deptArr[d];\n                var exp = expAccArr[e];\n                total =0.0;\n                for(var i =0; i<purchase_order_items.length; i++){\n                    if(purchase_order_items[i].department === dpt && purchase_order_items[i].expense_account === exp){\n                        total = total +  parseFloat(purchase_order_items[i].amount);\n                    }\n                }\n                 console.log(dpt+\" ==> \"+exp+\"==>\"+total);\n                 //Create a JSON object of non-zero totals for dpt and exp; add that to the payload\n               //  if(total>0) row ={\"department\":dpt,\"expense_account\":exp,\"amount\":total}; payload.push(row)\n               \n                 if(total>0) { \n                     row.department = dpt;\n                     row.expense_account = exp;\n                     row.amount = total; \n                     payload.push(row);\n                 }\n            }\n       }\n       console.log(\"PAYLOAD: \" + JSON.stringify(payload));\n       \n       frappe.call({\n           \"method\":\"purchase_order_budget_check\",\n            args: {\n                payload: payload,\n                fiscal_year: fiscal_year,\n                \n            },\n            async: true,\n            callback: function(response){\n                //SET DASHBOARD\n                //$(\"table\").remove(\"\");\n                //$(\"#tablebudget\").remove(\".form-dashboard-section\");\n                //$(\".form-dashboard-section\").remove(\"\");\n        \t\t/**let section = frm.dashboard.add_section(('<h5 style=\"margin-top: 0px;\">\\\n        \t\t\t\t\t<a href=\"#\">' + __(\"Budget Balances\") + '</a></h5>')\n        \t\t);**/\n        \t\t//$('<div>').remove(\".form-dashboard-section\");\n        \t\t//frm.dashboard.clear_headline();\n        \t\t\n        \t\tsetTimeout(() => {\n        \t\t    //$(\"element\").removeClass(\"form-dashboard-section custom\");\n            \t\t//budgetDashboardSection = frm.dashboard.add_section(`<h5 style=\"margin-top: 0px;\"> ${ __(\"Budget Balances\") }</a></h5>`);\n            \t\t\n            \t\t//var rows = $('<div id=\"budget\"></div>').appendTo(budgetDashboardSection);\n            \t\tvar htmlContent = \"\";\n                    for(var k=0;k<response.message.length;k++){\n                        var validBalance = response.message[k].balance_valid;\n                        var department_returned = response.message[k].department;\n                        var expense_account_returned = response.message[k].expense_account;\n                        balance = response.message[k].balance;\n                        this_amount = response.message[k].this_amount;\n                        if(validBalance ===\"no\"){\n                            //frappe.msgprint(\"One or more items for Department: \" + department_returned + \", Vote/Expense account: \" + expense_account_returned + \" exceed the current vote which has a balance of \" + str(balance) + \". Needed: \" + str(this_amount));\n                            //frappe.validated = false;\n                        }\n                        \n                        /*$(`<div id=\"tablebudget\" class='row form-dashboard-section' style='margin-bottom: 10px;'>\n                        \t<table style=\"border-collapse: separate; border-spacing: 20px 0;\">\n                        \t\t<tr><td>Department:</td><td> <span class=\"badge\">${department_returned}</span></td> </tr>\n                        \t\t<tr></tr>\n                        \t\t<tr><td>Expense Account:</td><td> <span class=\"badge\">${expense_account_returned}</span></td> <td>Vote Balance: </td><td><span class=\"badge\">${balance}</span></td> <td>This PO Amount: </td><td><span class=\"badge\">${this_amount}</span></td> </tr>\n                        \t\t\n                        \t</table>\n                        </div>`).appendTo(budgetDashboardSection);*/\n                        htmlContent = htmlContent + `<div id=\"tablebudget\" class='row form-dashboard-section' style='margin-bottom: 10px;'>\n                        \t<table style=\"border-collapse: separate; border-spacing: 20px 0;\">\n                        \t\t<tr><td>Department:</td><td> <span class=\"badge\">${department_returned}</span></td> </tr>\n                        \t\t<tr></tr>\n                        \t\t<tr><td>Expense Account:</td><td> <span class=\"badge\">${expense_account_returned}</span></td> <td>Vote Balance: </td><td><span class=\"badge\">${balance}</span></td> <td>This PO Amount: </td><td><span class=\"badge\">${this_amount}</span></td> </tr>\n                        \t\t\n                        \t</table>\n                        </div>`;\n                    }\n                    budgetDashboardSection = frm.dashboard.add_section(`<h5 style=\"margin-top: 0px;\"> ${ __(\"Budget Balances\") }</a></h5>` + htmlContent);\n            \t\t\n            \n            \t\tfrm.dashboard.show();\n        \t\t}, 10);\n            }\n        });\n        \n       // frm.clear_custom_buttons();\n       frm.set_df_property(\"supplier\", \"hidden\", true);\n        frappe.call({\n            method:\"purchasing_script\",\n            callback: function(supplier_response){\n                console.log(\"Suppliers Response: \"+JSON.stringify(supplier_response));\n                  console.log(\"See: changes\");\n                frm.set_query('supplier_test', function(){\n                     var suppliersArr  = [];\n                            console.log(\"See length: \"+supplier_response.message.length);\n                            for (var i=0;i<supplier_response.message.length;i++){\n                                suppliersArr.push(supplier_response.message[i].suppliers);\n                                console.log(\"See: \"+supplier_response.message[i].suppliers);\n                            }\n                            \n                            return {\n                                \"doctype\":'Supplier',\n                                \"filters\":[\n                                    [\"supplier_name\", \"IN\",suppliersArr]\n                                ]\n                            };\n                });\n            }\n        });\n       \n\n    },\n    supplier_test: function(frm, cdt, cdn){ //Get the dummy supplier field to populate the actual one\n        var selected = frm.doc.supplier_test;\n        console.log(selected);\n       // frm.doc.supplier.set_value(selected);\n         frappe.model.set_value(cdt, cdn,\"supplier\", selected);\n        frm.set_df_property(\"supplier\", \"hidden\", true);\n        frm.refresh_field(\"supplier\");\n       \n    },\n});\n\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Prequalification",
  "modified": "2020-05-26 00:25:31.346522",
  "name": "Prequalification-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Prequalification',{\n    validate:function(frm){ //code to validate the if prequalification name exists\n        \tfrappe.call({\n            method:\"prequalification_duplicate_checker\",\n            args: {\n                item_group:frm.doc.item_group,\n                document_name: frm.doc.name\n            },\n            callback: function(validateresponse){\n                console.log(\"the response\"+JSON.stringify(validateresponse))\n                \n                const proc_exists = validateresponse.message[0].quantity\n               \n                if(frm.doc.__islocal  ){ //This applies to Non Local documents only\n                    if(parseInt(proc_exists)>0){\n                        validated = false;\n                        msgprint('The Prequalification name exists Already')\n                            \n                        return false;\n                    }\n                }\n            }\n       });\n    },\n    on_submit:function(frm) {\n        //  console.log(\"we are here\");\n        frappe.call({\n            \"method\": \"mtrh_dev.mtrh_dev.doctype.buyer_store_allocation.buyer_store_allocation.supplier_map\",\n            args: {\n                item_group:frm.doc.item_group\n            },\n        });\n    },\n    onload: function(frm) {\n        \n    }\n});\n\nfrappe.ui.form.on('Prequalification Supplier', {\n    supplier_name:function(frm){\n        //var d = locals[doctype][name]\n        var item_group =frm.doc.item_group;\n        //d.item_group_name = frm.doc.item_group;\n        var supplier = frm.doc.supplier_name[0].supplier_name;\n        frm.doc.supplier_name[0].item_group_name = item_group;\n        console.log(\"I have set it up \"+supplier+\" \"+itemgroup)\n    },\n  \n})"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Procurement Plan",
  "modified": "2020-05-26 00:25:49.333695",
  "name": "Procurement Plan-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "var userid =\"\";\nvar userdept=\"\";\nvar itmgroup=\"\";\nvar itm_rate=0.0;\nfrappe.ui.form.on('Procurement Plan', {\n   \n    validate:function(frm){\n        var procurement_plan_items = frm.doc.procurement_item;\n       var department = frm.doc.department_name\n       for(var i=0;i<procurement_plan_items.length;i++){\n           procurement_plan_items[i].department_name = department\n       }\n        \tfrappe.call({\n            method:\"validate_procurement_plan\",\n            args: {\n                department:frm.doc.department_name,\n                fiscal_year:frm.doc.fiscal_year,\n                document_name: frm.doc.name\n            },\n            callback: function(validateresponse){\n                console.log(\"the response\"+JSON.stringify(validateresponse))\n                \n                const proc_exists = validateresponse.message[0].quantity\n               \n            if(frm.doc.__islocal  ){ //This applies to Non Local documents only\n                    if(parseInt(proc_exists)>0){\n                        validated = false;\n                        msgprint('The procurement Plan exists Already')\n                            \n                        return false;\n                    }\n                }\n            }\n       });\n        \n        \n        \n        \n    },\n    \n    \n    \n    onload:function(frm){\n        console.log(\"I am in here\");\n    \n        userid = frappe.user.name; //Get current logged in user\n        if(!frm.doc.department_name)  { \n            frappe.db.get_value(\"Employee\", {user_id : userid}, 'department') .then(r => {\n                let values = r.message;\n                userdept = values.department;///Let us return my current department\n                console.log(\"there department is\"+userdept)\n                 if(frm.doc.__islocal){\n                    frm.set_value(\"department_name\", userdept);\n                    \n                   // frappe.db.set_value('Procurement Plan',userdept,'department_name')\n                     \n                 }else{\n                     userdept=frm.doc.department_name;\n                 }\n                 console.log(\"Department \"+userdept);\n            });\n        }\n        \n        \n    },\n    item_group:function(frm){\n        itmgroup=frm.doc.item_group;\n        console.log(\"I selected \"+itmgroup);\n    },\n   \n    get_item_data: function(frm, item,pricelist_rate) {\n        console.log(\"As at now, price is \"+pricelist_rate)\n        frm.call({\n\t\t\tmethod: \"erpnext.stock.get_item_details.get_item_details\",\n\t\t\tchild: item,\n\t\t\targs: {\n\t\t\t\targs: {\n\t\t\t\t\titem_code: item.item_code,\n\t\t\t\t\twarehouse: item.warehouse,\n\t\t\t\t\tdoctype: frm.doc.doctype,\n\t\t\t\t\tbuying_price_list: frappe.defaults.get_default('buying_price_list'),\n\t\t\t\t\tcurrency: frappe.defaults.get_default('Currency'),\n\t\t\t\t\tname: frm.doc.name,\n\t\t\t\t\tqty: item.qty || 1,\n\t\t\t\t\tstock_qty: item.stock_qty,\n\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\tconversion_rate: 1,\n\t\t\t\t    //material_request_type: frm.doc.material_request_type,\n\t\t\t\t\tplc_conversion_rate: 1,\n\t\t\t\t\trate: item.rate,\n\t\t\t\t\tconversion_factor: item.conversion_factor\n\t\t\t\t}\n\t\t\t},\n\t\t\tcallback: function(r) {\n\t\t\t\tconst d = item;\n\t\t\t\tif(!r.exc) {\n\t\t\t\t\t$.each(r.message, function(k, v) {\n\t\t\t\t\t\tif(!d[k]) { \n\t\t\t\t\t\t    d[k] = v; \n\t\t\t\t\t\t    d[\"rate\"]=pricelist_rate; \n\t\t\t\t\t\t    item.amount=item.qty*pricelist_rate; \n\t\t\t\t\t\t    item.department_name=userdept;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfrm.refresh_field(\"procurement_item\")\n\t\t\t\t\t\tfrm.refresh_field(\"amount\")\n\t\t\t\t\t\tfrm.refresh_field(\"department_name\")\n\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n});\n\nfrappe.ui.form.on('Procurement Plan Item', {\n   item_code: function(frm, doctype, name){\n        const item = locals[doctype][name];\n        var department  = frm.doc.department_name;\n        item.department_name = department;\n        frappe.call({\n            method:\"default_item_price\",\n            args: {\n\t\t        item_code: item.item_code\n            },\n            async:false,\n            callback: function(data) {\n                console.log(\"RESPONSE: \"+JSON.stringify(data))\n                frm.events.get_item_data(frm, item, data.message);\n                if(data.procurement){\n                    item.inviteadvertise_tender = data.procurement[0].inviteadvertise_tender;\n                    item.date_for_completion_of_contract = data.procurement[0].date_for_completion_of_contract;\n                    item.contract_signing = data.procurement[0].contract_signing;\n                    item.bid_evaluation = data.procurement[0].bid_evaluation;\n                    item.tender_award = data.procurement[0].tender_award;\n                    item.notification_of_award = data.procurement[0].notification_of_award;\n                    item.bid_opening = data.procurement[0].bid_opening;\n                    item.source_of_funds = data.procurement[0].source_of_funds;\n                    item.total_time_to_contract_signature = data.procurement[0].total_time_to_contract_signature;\n                    item.procurement_method = data.procurement[0].procurement_method;\n                }\n                frm.refresh_field(\"procurement_item\");\n            }\n        });\n        \n    },\n    qty:function(frm, doctype, name){\n        const item = locals[doctype][name];\n         var department  = frm.doc.department_name;\n        item.department_name = department;\n        frappe.call({\n            method:\"default_item_price\",\n            args: {\n\t\t        item_code: item.item_code\n            },\n            async: false,\n            callback: function(data) {\n                console.log(data.message);\n                frm.events.get_item_data(frm, item, data.message);\n                item.inviteadvertise_tender = data.procurement[0].inviteadvertise_tender;\n                item.date_for_completion_of_contract = data.procurement[0].date_for_completion_of_contract;\n                item.contract_signing = data.procurement[0].contract_signing;\n                item.bid_evaluation = data.procurement[0].bid_evaluation;\n                item.tender_award = data.procurement[0].tender_award;\n                item.notification_of_award = data.procurement[0].notification_of_award;\n                item.bid_opening = data.procurement[0].bid_opening;\n                item.source_of_funds = data.procurement[0].source_of_funds;\n                item.total_time_to_contract_signature = data.procurement[0].total_time_to_contract_signature;\n                item.procurement_method = data.procurement[0].procurement_method;\n                frm.refresh_field(\"procurement_item\");\n            }\n        });\n   \n    }\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Material Request",
  "modified": "2020-05-26 00:33:54.819900",
  "name": "Material Request-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "var itmgroup =\"\";\nvar userid = \"\";\nvar userdept=\"\";\nvar fiscal_year=\"\";\nvar budget_name=\"\";\n\nvar qty_consumed_item_in_fy=0.0;\nvar procurement_plan_balance =0.0;\nvar year_start=\"\";\nvar year_end=\"\";\n\nfrappe.ui.form.on('Material Request', {\n    validate: function(frm){\n        console.log('HERE: ' + frm.doc.status);\n        if(frm.doc.status == \"Pending\"){\n            frappe.confirm(\n                'Are you sure you want to do this?',\n                function(frm){\n                    \n                },\n                function(frm){\n                    validated = false;\n                    window.close();\n                }\n            );\n        }\n    },\n    before_save: function(frm){\n        console.log('BEFORE SAVE: ' + frm.doc.status);\n       var material_request_items = frm.doc.items;\n       var department = frm.doc.department;\n       for(var i=0;i<material_request_items.length;i++){\n         \n           material_request_items[i].department = department;\n       }\n    },\n    after_save: function(frm, cdt, cdn){\n\t    //if (frm.doc.workflow_state && frm.doc.workflow_state.indexOf(\"Approved\") > 0){\n\t        /**frappe.prompt([\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Enter Memo/Reason for decision',\n\t\t\t\t\tfieldtype: 'Small Text',\n\t\t\t\t\treqd: true,\n\t\t\t\t\tfieldname: 'reason'\n\t\t\t\t}],\n\t\t\t\tfunction(args){\n\t\t\t\t    console.log(\"Reason: \" + args.reason);\n\t\t\t\t});**/\n\t    //}\n\t},\n    onload: function(frm){\n      \n        if(frm.doc.__islocal){\n            get_fiscal_year();\n            userid = frappe.user.name; //Get current logged in user\n            frappe.db.get_value(\"Employee\", {user_id : userid}, 'department') .then(r => {\n                let values = r.message;\n              //  console.log(\"My department is \"+values.department);\n                userdept = values.department;///Let us return all my rights on the console;\n            });\n        }\n    },\n    refresh: function(frm){\n        //frappe.show_alert(\"IS SAVED OR NOT? \" + frm.doc.__islocal)\n        /**frm.set_df_property(\"material_request_type\", \"read_only\", frm.doc.__islocal ? 0 : 1);\n        frm.set_df_property(\"company\", \"read_only\", frm.doc.__islocal ? 0 : 1);\n        frm.set_df_property(\"item_category\", \"read_only\", frm.doc.__islocal ? 0 : 1);\n        frm.set_df_property(\"schedule_date\", \"read_only\", frm.doc.__islocal ? 0 : 1);\n        frm.set_df_property(\"items\", \"read_only\", frm.doc.__islocal ? 0 : 1);\n        if(!frm.doc.__islocal){\n            var df = frappe.meta.get_docfield(\"Material Request\", \"items\", frm.doc.name);\n            df.read_only = 1;\n        }**/\n        \n        setTimeout(() => {\n\t\t\tfrm.clear_custom_buttons();\n        }, 10);\n        \n        \n    },\n    items_on_form_rendered: function(frm) {\n        var grid_row = frm.open_grid_row();\n    \t//if(frm.doc.workflow_state !== \"Draft PRQ By user\"){\n        if(!frm.doc.__islocal){\n    \t\tgrid_row.grid_form.fields_dict.item_code.df.read_only = true;\n    \t\tgrid_row.grid_form.fields_dict.item_code.refresh();\n    \t\tgrid_row.grid_form.fields_dict.item_name.df.read_only = true;\n    \t\tgrid_row.grid_form.fields_dict.item_name.refresh();\n    \t\tgrid_row.grid_form.fields_dict.qty.df.read_only = true;\n    \t\tgrid_row.grid_form.fields_dict.qty.refresh();\n    \t\tgrid_row.grid_form.fields_dict.conversion_factor.df.read_only = true;\n    \t\tgrid_row.grid_form.fields_dict.conversion_factor.refresh();\n    \t\tgrid_row.grid_form.fields_dict.schedule_date.df.read_only = true;\n    \t\tgrid_row.grid_form.fields_dict.schedule_date.refresh();\n    \t}\n    },\n    onload_post_render: function(frm){\n        console.log(\"WORKFLOW STATE: \" + frm.doc.workflow_state);\n        console.log(frm.doc);\n        \n        //if(frm.doc.status == \"Draft\" || frm.doc.workflow_state == \"Draft PRQ By user\"){\n        if(frm.doc.__islocal){\n            userid = frappe.user.name; //Get current logged in user\n            frappe.db.get_value(\"Employee\", {user_id : userid}, 'department') .then(r => {\n                let values = r.message;\n                console.log(\"My department is \"+values.department);\n                userdept = values.department;///Let us return all my rights on the console;\n                frm.set_value(\"department\", userdept);\n                \n                console.log(\"MR STATUS: \" + frm.doc.status);\n                frappe.call({\n                    method:\"frappe.client.get_list\",\n                    args: {\n                        parent: \"Department Item Allocation\",\n                        doctype:\"Buyer Section\",\n                        filters:[\n                            {parent: userdept},{parenttype:\"Department Item Allocation\"}\n                        ],\n                        fields: [\"item_group\"]\n                    },\n                    callback: function(values){\n                        console.log(\"values: \" + JSON.stringify(values));\n                        //DO SETQUERY\n                        frm.set_query('item_category', function(){\n                            var itemGroupArr  = [];\n                            for (var i=0;i<values.message.length;i++){\n                                itemGroupArr.push(values.message[i].item_group);\n                            }\n                            console.log(\"See: \"+itemGroupArr);\n                            return {\n                                \"doctype\":'Item Group',\n                                // \"fields\" : 'item_group',\n                                \"filters\":[\n                                    [\"item_group_name\", \"IN\", itemGroupArr]\n                                ]\n                            };\n                        });\n                    }\n                });\n            });\n            \n            itmgroup = frm.doc.item_category;\n            //frappe.show_alert('Items: ' + frm.doc.items[0].item_code, 5);\n            //frappe.show_alert(doc.status)\n            if(frm.doc.items[0].item_code === undefined){\n                frm.doc.items.splice(0,1);\n                frm.refresh_field(\"items\");\n            }\n        }\n    },\n\n    \"item_category\" : function(frm) {\n        //ONLY PROCEED IF ARE PAST DRAFT STAGE.\n        //if(frm.doc.status == \"Draft\" && frm.doc.workflow_state == \"Draft PRQ By user\"){\n        if(frm.doc.__islocal){\n            itmgroup = frm.doc.item_category;\n            console.log(itmgroup);\n            \n            var rowCount = frm.doc.items.length;\n            // frappe.show_alert(rowCount+\" rows\");\n            if(parseInt(rowCount)>0){\n                frm.doc.items.splice(0,rowCount);\n                frm.refresh_field(\"items\");\n                frappe.show_alert('Items Cleared: If any items had been added below, they have been cleared.', 5);\n\n            }\n        }\n    },\n     \n});\nfrappe.ui.form.on('Material Request Item', {\n    items_add: function(frm){\n        if(itmgroup.length > 0){\n    \t     frm.set_query('item_code','items', function(){\n    \t         return {\n    \t             \"filters\": {\n    \t                 'item_group': itmgroup\n                     }\n                 };\n             });\n    \t }else{\n    \t     frappe.show_alert(\"You have not selected an item category\",5);\n    \t }\n\t },\n    item_code: function(frm, doctype, name) {\n     \n        const item = locals[doctype][name];\n        \n         \n          frappe.call({\n            method:\"getprocurementmethod\",\n            args: {\n\t\t        itemcode:item.item_code,\n\t\t        fiscalyear:fiscal_year,\n\t\t        department:userdept\n            },\n            async:false,\n            callback: function(data) {\n                \n                item.procurement_method =data.message;\n               // frm.refresh_field(\"items\")\n                \n            }\n        })\n        frappe.call({\n            method:\"default_item_price\",\n            args: {\n\t\t        item_code: item.item_code\n            },\n            async:false,\n            callback: function(data) {\n                console.log(data.message)\n                item.rate =data.message;\n                frm.refresh_field(\"items\");\n                update_grand_total(frm);\n                \n            }\n        })\n    },  \n    qty:function(frm, doctype, name) {\n        // console.log(\"we are gereeeeeeeee\")\n        const item = locals[doctype][name];\n        frappe.call({\n            method:\"default_item_price\",\n            args: {\n\t\t        item_code: item.item_code,\n            },\n            async:false,\n            callback: function(data) {\n                console.log(data.message);\n                item.rate =data.message;\n                frm.refresh_field(\"items\")\n                update_grand_total(frm);\n            }\n        })\n         \n    }\n})\nfunction update_grand_total(frm){\n   var grand_total_value =0.0\n    $.each(frm.doc.items || [], function(i, d) {\n         grand_total_value = grand_total_value + flt(d.amount);\n     })\n    console.log(\"Grand total =\"+grand_total_value)\n    frm.set_value(\"grand_total\", grand_total_value);\n    frm.set_value(\"total_request_value\", grand_total_value);\n    frm.refresh_field(\"grand_total\")\n    frm.refresh_field(\"total_request_value\")\n}\nfunction getPrice(itemcode, pricelist, item, frm){\n    frappe.call({\n        method:\"frappe.client.get_list\",\n        args: {\n            parent: \"Item\",\n            doctype:\"Item Price\",\n            filters:[\n                {item_code: itemcode},{price_list: pricelist}\n            ],\n            fields: [\"price_list_rate\"],\n        },\n        callback: function(price){\n        var item_price = price.message[0].price_list_rate;\n        console.log(item_price);\n        item.rate = item_price;\n        item.department = userdept;\n        }\n   });\n}\nfunction get_fiscal_year(){\n    frappe.call({\n        method:\"frappe.client.get_list\",\n        args: {\n            doctype:\"Fiscal Year\",\n            filters:[\n                {disabled: false}\n            ],\n            fields: [\"year\",\"year_start_date\",\"year_end_date\"],\n        },\n        callback: function(fiscal_yr){\n          //  console.log(\"this is the fiscal_yr\"+JSON.stringify(fiscal_yr))\n            fiscal_year = fiscal_yr.message[0].year;\n            year_start = fiscal_yr.message[0].year_start_date;\n            year_end = fiscal_yr.message[0].year_end_date;\n            console.log(\"Setting \"+fiscal_year+\" to start \"+year_start+\" to \"+year_end);\n        }\n   });\n}\n\nfunction get_budget_id(department, exp_acc, amount){\n    var budget_id =\"\";\n    var dept = department;\n    var amt = amount;\n    frappe.db.get_value('Budget', {\"department\": department,\"budget_against\":\"Department\"}, 'name').then(r => {\n        let values = r.message;\n        console.log(values.name);\n        //Get Amount Now below:\n        budget_id = values.name;\n        get_budget_amt(budget_id, dept, exp_acc, amt);       \n    });\n}\nfunction verify_proc_plan(department, item, set_qty, consumed_qty){\n    console.log(\"checking \"+item+\" proc_bal for \"+department+\" in the yr \"+fiscal_yr+\" against set qty \"+set_qty)\n    frappe.call({\n        method:\"frappe.client.get_list\",\n        args:{\n            parent:\"Procurement Plan\",\n            doctype:\"Procurement Plan Item\",\n            filters:[\n                {item_code: item}, {parent: department},{fs_yr: fiscal_yr}\n            ],\n            fields: [\"qty\"],\n        },\n        callback: function(proc_plan_bal){\n            console.log(\"Setting \"+JSON.stringify(proc_plan_bal))\n            if(proc_plan_bal.message.length>0){\n                var qty_bal =proc_plan_bal.message[0].qty;\n                \n                if(parseFloat(set_qty) > parseFloat(qty_bal)){\n                    frappe.msgprint({\n                        title: __('Procurement Plan Exceeded'),\n                        indicator: 'red',\n                        message: __(\"This item exceeds the annual procurement plan balance for \"+department+\" under FY \"+fiscal_yr+\".\\nProcurement balance: \"+qty_bal+\"; Amt requested \"+set_qty+\"\")\n                    });\n                }\n            }else{\n                frappe.msgprint({\n                    title: __('Item not in Procurement Plan'),\n                    indicator: 'red',\n                    message: __(\"This item does not exist in the annual procurement plan under FY \"+fiscal_yr)\n                });\n            }\n        }\n    });\n}\n    \nfunction  get_budget_amt(budget_id , department, exp_acc, amt){\n    //frappe.msgprint(budget_id+\"\\n\"+department+\"\\n\"+exp_acc);\n    console.log(exp_acc+\"---\"+budget_id+\" \"+amt)\n    frappe.call({\n        method:\"frappe.client.get_list\",\n        args: {\n            parent:\"Budget\",\n            doctype:\"Budget Account\",\n            filters:[\n                {account: exp_acc}, {parent: budget_id}\n            ],\n            fields: [\"budget_amount\"],\n        },\n        callback: function(budget_amt){\n            console.log(\"Setting \"+JSON.stringify(budget_amt))\n            var amt_budget =budget_amt.message[0].budget_amount;\n            if(parseFloat(amt) > parseFloat(amt_budget)){\n                frappe.msgprint({\n                    title: __('Budget Exceeding'),\n                    indicator: 'red',\n                    message: __(\"This item exceeds the annual budget for \"+department+\" under \"+exp_acc+\".\\nBudget amount: \"+amt_budget+\"; Amt requested \"+amt+\"\")\n                })\n            }\n        }\n    });\n}\n\nfunction check_proc_plan(item, department, set_qty, item_arr, frm){\n    console.log(\"Beginning execution...\")\n    frappe.call({\n        \"method\": \"mtrh_dev.mtrh_dev.doctype.procurement_plan.procurement_plan.procurement_plan_bal_mrq\",\n        args: {\n            year_start: year_start,\n            year_end: year_end,\n            item_code: item,\n            department_name: department,\n            fiscal_year: fiscal_year\n        },\n        callback: function(proc_plan_balance){\n            console.log(\"The proc balance:\"+JSON.stringify(proc_plan_balance))\n           for(var property in proc_plan_balance) {\n                // console.log(property + \"=\" + proc_plan_balance[property]);\n                 if(property===\"message\"){\n                    procurement_plan_balance = proc_plan_balance[property];   \n                 }\n            }\n            console.log(\"Balance: \"+parseFloat(procurement_plan_balance)+\" for \"+department+\"'s \"+item+\" against \"+set_qty)\n            \n            if(parseFloat(procurement_plan_balance) >= parseFloat(set_qty)){\n                ///If procurement plan balance is satisfied, do nothing. Allow user to proceed\n            }else{\n                if(parseFloat(procurement_plan_balance)<=0){///If procurement plan balance is zero or negative we remove the row.\n                  \n             frappe.msgprint({\n                    title: __('Exhausted/Non-existent procurement plan for '+item),\n                    indicator: 'red',\n                    message: __(\"This item quantity is exhausted or doesn't exist in annual procurement plan balance/UoM for \"+department+\" under FY \"+fiscal_year+\".\\n We'll delete this row!\")\n                });\n                     var tablelength = frm.doc.items.length;\n                     var currentrow = parseInt(tablelength-1);\n                     console.log(\"We are at row \"+currentrow)\n                     frm.doc.items.splice(currentrow,currentrow);\n                     frm.refresh_field(\"items\");\n                     if(currentrow===0){\n                         frm.doc.items.splice(currentrow,1);\n                         frm.refresh_field(\"items\");\n                     }\n                }else{//We set the value of balance to the quantity requested.\n                \n                frappe.msgprint({\n                    title: __('Procurement Plan Exceeding'),\n                    indicator: 'yellow',\n                    message: __(\"This item exceeds the annual procurement plan balance/UoM for \"+department+\" under FY \"+fiscal_year+\".\\nProcurement Plan balance: \"+procurement_plan_balance+\"; Quantity requested \"+set_qty+\"\\n We'll set the balance as the requested quantity\")\n                });\n                \n                item_arr.qty = parseFloat(procurement_plan_balance);\n                    \n                }\n            }\n            \n        }\n    });\n}\n\nfrappe.ui.form.on('Material Request Item', {\n    qty: function (frm, doctype, name) {\n        var d = locals[doctype][name];\n\t\tif (flt(d.qty) < flt(d.min_order_qty)) {\n\t\t\tfrappe.msgprint(__(\"Warning: Material Requested Qty is less than Minimum Order Qty\"));\n\t\t}\n\t\tconst item = locals[doctype][name];\n    \t//console.log(JSON.stringify(item))\n    \tconsole.log(\"What to check against in procurement plan: \\nDepartment: \"+userdept+\",\\nExpense Account: \"+item.expense_account+\"\\nTotal Qty= \"+item.qty);\n    \tconsole.log(\"Financial year: \"+fiscal_year);\n    \t\t\n\t    check_proc_plan(item.item_code, userdept, item.qty, item,frm)//checking against submitted MRQs\n\t    // frappe.msgprint(\"fetch fetch\"+item.item_code);\n\t    // console.log(\"we are hereddddddddd\")\n    },\n    item_code: function(frm, doctype, name){\n        var d = locals[doctype][name];\n\t\tif (flt(d.qty) < flt(d.min_order_qty)) {\n\t\t\tfrappe.msgprint(__(\"Warning: Material Requested Qty is less than Minimum Order Qty\"));\n\t\t}\n\t\tconst item = locals[doctype][name];\n    \tconsole.log(\"What to check against in procurement plan: \\nDepartment: \"+userdept+\",\\nExpense Account: \"+item.expense_account+\"\\nTotal Qty= \"+item.qty);\n    \tconsole.log(\"Financial year: \"+fiscal_year);\n\t    check_proc_plan(item.item_code, userdept, item.qty, item, frm)//checking against submitted MRQs\n\t       \n\t       \n    }\n});\n\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Request for Quotation",
  "modified": "2020-05-26 00:39:51.068727",
  "name": "Request for Quotation-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "var fiscal_year=\"\";\nvar adhocrows;\nvar year_start=\"\";\nvar year_end=\"\";\n var proc_qty=\"\";\nfrappe.ui.form.on('Request for Quotation', {\n    validate:function(frm){\n       var proc_method_type=frm.doc.mode_of_procurement;\n       if(adhocrows<3 && proc_method_type!=\"Direct Procurement\" ){\n             frappe.throw(__(\"The Committee Members Should be atleast three\"));\n             frappe.validated=false;\n        } else {\n            if(proc_method_type===\"\"){\n                frappe.throw(__(\"Please Select Mode of Purchase\"));\n                 frappe.validate=false;\n            }\n            else if(proc_method_type==\"Closed Tender\"){\n              populate_procurement_plan_quantities(frm)\n            }\n        }\n        var items = frm.doc.items;\n        var itemsarr =[]\n        for(var i=0;i<items.length;i++){\n            itemsarr.push(items[i].item_code)\n        }\n        console.log(itemsarr)\n        frappe.call('check_for_inspection_template', {\n                async:false,\n                item_codes: itemsarr\n            }).then(r => {\n                console.log(r)\n             if(r.status===\"not ok\"){\n                 frappe.validated = false\n                 for(var j=0;j<r.items_without_inspection_template.length;j++){\n                     frappe.msgprint({\n                            title:\"Error: Missing inspection templates\",\n                            indicator: 'red',\n                            message: __(r.items_without_inspection_template[j]),\n                            \n                     })\n                 }\n                }\n        })\n    },\n    mode_of_procurement:function(frm) {\n        var type_method=frm.doc.mode_of_procurement;\n            if(type_method==\"Request for Quotation\"){\n                populate_items_and_suppliers(frm)\n            }\n            if(type_method==\"Closed Tender\"){\n                populate_procurement_plan_quantities(frm)\n            }\n            //mode_of_procurement\n            if(type_method==\"Direct Procurement\"){\n               \n                 frm.set_query(\"material_request_number\", function() {\n                    return {\n                        \"doctype\":\"Material Request\",\n                        \"filters\": {\n                            \"docstatus\": \"1\"\n                        }\n                    };\n                });\n                \n                //Splice and hide ad hoc members\n                  if(frm.doc.adhoc_members){\n                    var numt2 = frm.doc.adhoc_members.length;\n                    frm.doc.adhoc_members.splice(0, numt2);\n                    frm.set_df_property(\"adhoc_members\", \"hidden\", true);\n                    frm.refresh_field(\"adhoc_members\")\n                  }\n               //Splice the items table\n                var numrows = frm.doc.items.length;\n                frm.doc.items.splice(0, numrows);\n                frm.refresh_field(\"items\");\n                \n               //Splice material request table\n               if(frm.doc.material_requests){\n                var numt = frm.doc.material_requests.length;\n                frm.doc.material_requests.splice(0, numt);\n                frm.refresh_field(\"material_requests\")\n                }\n               //Splice suppliers table\n                var nums = frm.doc.suppliers.length;\n                frm.doc.suppliers.splice(0, nums);\n                frm.refresh_field(\"suppliers\")\n               //Raise info dialog to select the material request in question, items and appropriate supplier\n               let d = new frappe.ui.Dialog({\n                title: 'Enter the supplier to send a request for quotation to:',\n                fields: [\n                    {\n                        label: 'Supplier Name',\n                        fieldname: 'supplier_name',\n                        fieldtype: 'Link',\n                        options:\"Supplier\"\n                    },\n                    {\n                        label: 'Material Request',\n                        fieldname: 'material_request_link',\n                        fieldtype: 'Link',\n                        options:\"Material Request\",\n                        reqd:1,\n                        ignore_user_permissions:1,\n                        page_length:10000,\n                        filters: {\n                            \"docstatus\": \"1\"\n                        }\n                    }\n                ],\n                \n                primary_action_label: 'Add Items',\n                primary_action(values) {\n                    console.log(values);\n                    var material_request = values.material_request_link\n                    var  supplier = values.supplier_name\n                    //run this function\n                    frappe.call({\n           \n                        method:\"mtrh_dev.mtrh_dev.workflow_custom_action.procurement_method_on_select\",\n                        args: {\n            \t\t        material_request: material_request,\n            \t\t        supplier_name:supplier\n                        },\n                        async: false,\n                        callback: function(data) {\n                            console.log(\"DATA: \" + JSON.stringify(data));\n                            var response_status = data.status;\n                            if(data.status!=\"invalid\"){\n                                var numrows = frm.doc.suppliers.length;\n                                var itemrows = frm.doc.items.length;\n                                var mrrows = 0;\n                                console.log(\"the\"+data)\n                                if(frm.doc.material_requests){\n                                    mrrows = frm.doc.material_requests.length;\n                                }\n                                var suppliers_for_group = data.suppliers_for_group;\n                                var items = data.filtered_items;\n                                var items_total=data.items\n                                var material_requests = data.material_requests;\n                                //LOAD SUPPLIERS\n                                frm.doc.suppliers.splice(0, numrows);\n                                for (var i = 0; i < suppliers_for_group.length; i++) {\n                                    var newrow =frm.add_child(\"suppliers\");\n                                    newrow.supplier= suppliers_for_group[i].supplier_name;\n                                    newrow.contact= suppliers_for_group[i].contact;\n                                    newrow.email_id = suppliers_for_group[i].email;\n                                    \n                                    refresh_field(\"suppliers\");\n                                    \n                                }\n                                //LOAD ITEMS\n                                frm.doc.items.splice(0, itemrows);\n                                for(var x = 0; x < items.length; x++) {\n                                    var row_item = frm.add_child(\"items\");\n                                    row_item.item_code = items[x].item_code;\n                                    row_item.qty = items[x].quantity;\n                                    row_item.uom = items[x].uom;\n                                    row_item.item_name = items[x].item_name\n                                    row_item.procurement_method = items[x].procurement_method;\n                                    row_item.description = items[x].description;\n                                    row_item.warehouse = items[x].warehouse;\n                                    refresh_field(\"items\");\n                                }\n                                \n                                //LOAD MATERIAL REQUESTS\n                                if(frm.doc.material_requests){\n                                    frm.doc.material_requests.splice(0, mrrows);\n                                }\n                                for(x = 0; x < material_requests.length; x++) {\n                                    var row_mr = frm.add_child(\"material_requests\");\n                                    row_mr.material_request = material_requests[x];\n                                    refresh_field(\"material_requests\");\n                                }\n                            d.hide();    \n                            }else{\n                                d.show();\n                                frappe.throw(\"Invalid material request selected. Possible reasons:\\n1.Unapproved MR, \\n2.Purchase Type is Not Purchase, \\n3.All items Unattended\")\n                            }\n                        }\n                });\n             \n                        \n                    \n            }\n        });\n                    \n            d.show();\n               //Repopulate fields\n            }\n    },\n    onload:function(frm){\n        frappe.call({\n            method:\"frappe.client.get_list\",\n            args: {\n                doctype:\"Fiscal Year\",\n                filters:[\n                        {disabled: false}\n                        ],\n                fields: [\"year\",\"year_start_date\",\"year_end_date\"],\n            },\n            callback: function(fiscal_yr){\n                fiscal_year = fiscal_yr.message[0].year;\n                year_start = fiscal_yr.message[0].year_start_date;\n                year_end = fiscal_yr.message[0].year_end_date;\n                \n            }\n       });\n            \n           \n    },\n    \n    onload_post_render: function(frm) {\n       // console.log(\"WORKFLOW STATE: \" + frm.doc.workflow_state);\n    /*    if(frm.doc.workflow_state === 'Pending Supply Chain Management Approval'){\n            frappe.confirm('Are You Sure You Want to Proceed?',\n            () => {\n               //yes action\n            }, () => {\n                // no action\n            })\n        }*/\n        /*\n        else if (frm.doc.workflow_state === 'Pending Senior Director Approval'){\n            frm.set_value('type', 'Request for Quotation');\n            refresh_field(\"type\");\n        }\n        */\n          frappe.call({\n           method:\"mtrh_dev.mtrh_dev.tqe_evaluation.rfq_send_emails_suppliers\",\n           args:{\n\t\t\t\trfqno:frm.doc.name,\n\t\t\t\t},\n\t\t\t\n            callback: function(data) {\n                console.log(\"the user mails are\" + JSON.stringify(data.usermails));\n            }\n          })\n          \n          \n     \n    },\n    \n    set_email_address: function(frm, cdt,cdn, supplier) {\n\t\tfrappe.call({\n\t\t\tmethod:\"erpnext.accounts.party.get_party_details\",\n\t\t\targs:{\n\t\t\t\tparty: supplier,\n\t\t\t\tparty_type: 'Supplier'\n\t\t\t},\n\t\t\tcallback: function(r){\n\t\t\t\tif(r.message){\n\t\t\t\t    console.log(r.message);\n\t\t\t\t\tfrappe.model.set_value(cdt, cdn, 'contact', r.message.contact_person);\n\t\t\t\t\tfrappe.model.set_value(cdt, cdn, 'email_id', r.message.contact_email);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n    \n    \"buyer_section\": function(frm) {\n        populate_items_and_suppliers(frm)\n    },\n    \n    refresh: function(frm) {\n        setTimeout(() => {\n\t\t\t//frm.clear_custom_buttons();\n\t\t\t\n        }, 10);\n        console.log(\"DEFAULT DATE: \" + frm.doc.transaction_date);\n        if(frm.doc.transaction_date === '' || frm.doc.transaction_date === undefined){\n            frm.set_value('transaction_date', frappe.datetime.add_days(frappe.datetime.get_today(), 7) + \" 10:00\");\n        }\n        \n        \n    }\n});\nfrappe.ui.form.on('Request For Quotation Adhoc Committee', {\n    user:function(frm, cdt, cdn) {\n       var rw = locals[cdt][cdn];\n       var userrowvalue = rw.user;\n       var membercount=0;\n       var memcount=0;\n       var members=frm.doc.adhoc_members;\n       for(var h=0;h<members.length;h++)\n       {\n           if(members[h].user==userrowvalue)\n           {\n               membercount +=1\n          \n           }\n            \n       }\n       if(membercount>1)\n       {\n           frappe.throw(__(\"You have duplicate Member Committee\"));\n          \n       }\n      \n       var rowuser1 = rw.user;\n      // console.log(\"we are egre\"+rowuser1)\n        var passwr=random_password_generate(5,10)\n        rw.user_password = passwr;\n        \n        // refresh_field(\"adhoc_members\");\n        \n         \tfrappe.call({\n\t\t\tmethod:\"get_employee_details\",\n\t\t\targs:{\n\t\t\t\tuser:rowuser1,\n\t\t\t},\n\t\t\tcallback: function(r)\n\t\t\t{\n\t\t\t//\tconsole.log(\"we are ggegee\"+JSON.stringify(r))\n\t\t\t\t\n\t\t\t\tfor(var u=0;u<r.employeedetails.length;u++)\n\t\t\t\t{\n\t\t\t\t    rw.employee_name=r.employeedetails[u].employee_name\n\t\t\t\t    rw.user_mail=r.employeedetails[u].prefered_email\n\t\t\t\t}\n\t\t\t}\n\t\t});\n        refresh_field(\"adhoc_members\");\n     \n   }\n\n})\n\nfunction populate_items_and_suppliers(frm){\n    var buyer_item_group = frm.doc.buyer_section;\n        frappe.call({\n            //method:\"request_for_quotation\",\n           // method:\"rfq_items_suppliers_filters\",\n           // method:\"rfq_items_suppliers_mrqs\",\n           method:\"mtrh_dev.mtrh_dev.workflow_custom_action.buyer_section_on_select\",\n            args: {\n\t\t        item_group: buyer_item_group\n            },\n            callback: function(data) {\n                console.log(\"DATA: \" + JSON.stringify(data));\n                var numrows = frm.doc.suppliers.length;\n                var itemrows = frm.doc.items.length;\n                var mrrows = 0;\n                console.log(\"the\"+data)\n                if(frm.doc.material_requests){\n                    mrrows = frm.doc.material_requests.length;\n                }\n                var suppliers_for_group = data.suppliers_for_group;\n                var items = data.filtered_items;\n                var items_total=data.items\n                var material_requests = data.material_requests;\n                //LOAD SUPPLIERS\n                frm.doc.suppliers.splice(0, numrows);\n                for (var i = 0; i < suppliers_for_group.length; i++) {\n                    var newrow =frm.add_child(\"suppliers\");\n                    newrow.supplier= suppliers_for_group[i].supplier_name;\n                    newrow.contact= suppliers_for_group[i].contact;\n                    newrow.email_id = suppliers_for_group[i].email;\n                    \n                    refresh_field(\"suppliers\");\n                    \n                }\n                //LOAD ITEMS\n                frm.doc.items.splice(0, itemrows);\n                for(var x = 0; x < items.length; x++) {\n                    var row_item = frm.add_child(\"items\");\n                    row_item.item_code = items[x].item_code;\n                    row_item.qty = items[x].quantity;\n                    row_item.uom = items[x].uom;\n                    row_item.item_name = items[x].item_name\n                    row_item.procurement_method = items[x].procurement_method;\n                    row_item.description = items[x].description;\n                    row_item.warehouse = items[x].warehouse;\n                    refresh_field(\"items\");\n                }\n                \n                //LOAD MATERIAL REQUESTS\n                if(frm.doc.material_requests){\n                    frm.doc.material_requests.splice(0, mrrows);\n                }\n                for(x = 0; x < material_requests.length; x++) {\n                    var row_mr = frm.add_child(\"material_requests\");\n                    row_mr.material_request = material_requests[x].parent;\n                    refresh_field(\"material_requests\");\n                }\n            }\n        });\n}\nfunction populate_procurement_plan_quantities(frm){\n     $.each(frm.doc.items, function(index, row){\n        frappe.call({\n            method:\"getprocurementmethod\",\n            args: {\n    \t        itemnum:row.item_code,\n    \t        fyr:fiscal_year,\n            },\n            async:false,\n            callback:function(data) {\n                  proc_qty=data.qty\n                  console.log(\"Setting procurement plan quantity for \"+row.item_code+\" as \"+proc_qty)\n                  row.qty=data.qty\n                  refresh_field(\"items\")\n            }\n        });\n    });\n}\nfunction random_password_generate(max,min){\n    var passwordChars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#@!%&()/\";\n    var randpasslength = Math.floor(Math.random() * (max - min + 1)) + min;\n    var randuserpass = Array(randpasslength).fill(passwordChars).map(function(x){ \n        return x[Math.floor(Math.random() * x.length)] \n    }).join('');\n    return randuserpass;\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Tender Quotations Evaluations",
  "modified": "2020-05-26 00:21:05.389984",
  "name": "Tender Quotations Evaluations-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "var totalu;\nvar max = 0;\n\nfrappe.ui.form.on('Tender Quotations Evaluations', {\n    validate: function(frm) { //before save loop through the child table and check the chosen bidder #checkbox\n       var method = frm.doc.procurement_method\n        console.log(JSON.stringify(method))\n        if (method) {\n            if (method === \"Request for Quotation\") {\n                max = 1;\n            } else {\n                max = 3;\n            }\n        } else {\n            msgprint(\"No procurement method selected for this procurement \");\n            frappe.validated = false;\n            return false;\n        }\n        //Above will need set up later\n        console.log(method + \" means maximum bidders to award is: \" + max);\n        var percentages = [];\n\n        var quots = frm.doc.bidders;\n        for (var i = 0; i < quots.length; i++) {\n            index = percentages.indexOf(quots[i].rate_bidder);\n            console.log(index + \" of \" + quots[i].rate_bidder);\n            if (index >= 0) {\n                msgprint(\"Error. Please break the tie(duplicate) for the score entered \" + quots[i].rate_bidder)\n                frappe.validated = false;\n                return false;\n            } else {\n                percentages.push(quots[i].rate_bidder);\n            }\n        }\n        var sorted_percentages = percentages.sort(function(a, b) {\n            return b - a\n        });\n        //Return the selected bids only based on maximum bidders that can be picked\n        var sliced_percentages = sorted_percentages.slice(0, parseInt(max));\n        //Set Boolean to true if it price is present in the array above\n        console.log(percentages + \" and sorted  \" + sorted_percentages + \" Sliced percentages \" + sliced_percentages);\n        frm.clear_table(\"recommendation\");\n        refresh_field(\"recommendation\");\n        for (var k = 0; k < quots.length; k++) {\n            var price = quots[k].rate_bidder;\n            if (sliced_percentages.includes(price)) {\n                quots[k].chosen_supplier = true;\n                console.log(price + \" is included\");\n                //Add row to recommendation table:\n                var newrow1 = frm.add_child(\"recommendation\");\n                newrow1.bidder = quots[k].bidder;\n                newrow1.item_code = quots[k].item_code;\n                newrow1.item_name = quots[k].item_name;\n                newrow1.item_price = quots[k].item_price;\n                newrow1.rate_bidder = quots[k].rate_bidder;\n                newrow1.uom = quots[k].uom;\n                newrow1.brand = quots[k].brand;\n                console.log(quots[k].bidder);\n                refresh_field(\"recommendation\");\n            } else {\n                console.log(price + \" is NOT included\");\n                quots[k].chosen_supplier = false;\n            }\n        }\n        var idx = 1;\n        frm.doc.recommendation.sort(function(b, a) {\n            if (a.rate_bidder < b.rate_bidder) {\n                return -1\n            } else if (a.rate_bidder > b.rate_bidder) {\n                return 1\n            }\n            return 1;\n        });\n        frm.doc.recommendation.map(function(item) {\n            item.idx = idx++;\n        });\n        refresh_field(\"recommendation\");\n\n    },\n    send_email_notifications:function(frm){\n        var status =  frm.doc.docstatus  \n        if(status===1){\n            //frappe.msgprint(\"Success, sending messages now \",\"Sending emails\")\n            frappe.show_alert(\"Success, sending messages now\", 5);\n            frappe.call({\n                method: \"mtrh_dev.mtrh_dev.workflow_custom_action.send_tqe_action_email\",\n                args:{\n                    \"document\": frm.doc.name,\n                    \"rfq\":frm.doc.rfq_no,\n                    \"item\": frm.doc.item_name\n                 },\n                callback:function(response){\n                    console.log(response)\n                }\n            })\n        }else{\n            frappe.throw(\"Sorry, you cannot send communications for un-approved documents\",\"Error\")\n        }\n    },\n    onload: function(frm) {\n        //onload load all approved request for quotations\n        var date_leo = frappe.datetime.now_datetime();\n        frm.get_field(\"bidders\").grid.cannot_add_rows = true; //hiding the add row button\n        frm.get_field(\"bidders\").grid.cannot_remove_rows = true;\n        $('[data-fieldname=\"bidders\"]').find('.grid-remove-rows').hide()\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Request for Quotation\",\n                filters: {\n                    //  transaction_date: [\">=\",date_leo]\n                    docstatus: 1\n                }, ///to be replace by variable date_leo\n                // {docstatus:1,transaction_date:'='date_leo},\n                fields: [\"name\"]\n            },\n            callback: function(pendingrfqs) {\n                var rfqnumbers = JSON.stringify(pendingrfqs);\n                var rfqnumbersArr = [];\n                for (var i = 0; i < pendingrfqs.message.length; i++) {\n                    rfqnumbersArr.push(pendingrfqs.message[i].name);\n                }\n                frm.set_query('rfq_no', function() {\n                    return {\n                        doctype: \"Request for Quotation\",\n                        \"filters\": [\n                            [\"name\", \"IN\", rfqnumbersArr]\n                        ]\n                    };\n                });\n            }\n        });\n    },\n    //BELOW==> clicking the button and selecting a RFQ number should yield the same result\n    \"rfq_no\": function(frm) {\n         var method = frappe.db.get_value('Request for Quotation', {\"name\":frm.doc.rfq_no}, 'mode_of_procurement')\n         console.log(JSON.stringify(method)+\" is the procurement method for \"+ frm.doc.rfq_no)\n         frm.set_value(\"procurement_method\",method)\n        validate_document(frm, \"\")\n    },\n    \"rfqbutton\": function(frm) { //set items on item drop down list when you click the button\n        validate_document(frm, \"btn\")\n    },\n    \"item_name\": function(frm) { //onchange of the items and append on the child table\n        var rfqno = frm.doc.rfq_no;\n        var item = frm.doc.item_name;\n        //clear tables first\n        frm.clear_table(\"bidders\");\n        refresh_field(\"bidders\");\n        frm.clear_table(\"recommendation\");\n        refresh_field(\"recommendation\");\n        //Confirm if exists\n        //\n         frappe.call({\n                    method: \"default_item_price\",\n                    args: {\n                        item_num: item,\n                        rfqno: rfqno\n                    },\n                    async: false,\n                    callback: function(existings) {\n                        var existing = JSON.stringify(existings);\n                        var exists=existings.existingitem;\n                        if(exists===null){\n                        load_page_data(frm, rfqno, item)\n                        }else{\n                         frappe.throw(\"This item has already been evaluated\")\n             }\n                       \n    }                   \n    })\n        \n\n    },\n\n});\nfunction load_page_data(frm, rfqno, item) {\n                frappe.call({\n                    method: \"tqe_sqtn_filter_by_item\",\n                    args: {\n                        item_code: item,\n                        reference_number: rfqno\n                    },\n                    async: false,\n                    callback: function(itemkk) {\n                        var itemlist = JSON.stringify(itemkk);\n                       // console.log(\"fdddddddddddddddddddddd\" + itemkk.bids)\n                        var itemArr = [];\n                        for (var i = 0; i < itemkk.message.length; i++) {\n                            var newrow = frm.add_child(\"bidders\");\n                            newrow.bidder = itemkk.message[i].parent\n                            newrow.item_code = itemkk.message[i].item_code\n                            newrow.item_name = itemkk.message[i].item_name;\n                            newrow.item_price = itemkk.message[i].rate;\n                            newrow.uom = itemkk.message[i].uom;\n                            newrow.brand = itemkk.message[i].brand;\n                            newrow.quotation_number = itemkk.message[i].request_for_quotation;\n                            newrow.tech_specifications = itemkk.message[i].attachments;\n                            refresh_field(\"bidders\");\n                        }\n\n                    }\n                });\n           // } else {\n               // frappe.throw(\"The Item has already been Evaluated.You can't Evaluate twice\")\n           // }\n\n\n       // }\n    //});\n\n}\n\nfunction updatepricelist(bidder, item_name, itemcode, itemprice, uom, brand) { //get the supplier name of the bidder chosen\n    frappe.call({\n        method: \"frappe.client.get_list\",\n        args: {\n            doctype: \"Supplier Quotation\",\n            filters: [{\n                name: bidder\n            }],\n            fields: [\"supplier_name\"]\n        },\n        callback: function(supplier_name) {\n            var supplier = JSON.stringify(supplier_name);\n            var suppname = supplier_name.message[0].supplier_name\n            var user = frappe.user.name;\n            frappe.call({\n                \"method\": \"mtrh_dev.mtrh_dev.doctype.procurement_plan.procurement_plan.updatesupplier\",\n                args: {\n                    itemcode: itemcode,\n                    suppname: suppname,\n                    bidder: bidder,\n                    itemname: item_name,\n                    itemprice: itemprice,\n                    user: user,\n                    uom: uom,\n                    brand: brand,\n                },\n                callback: function(updatesupplier) {\n                    console.log(updatesupplier);\n\n                }\n            })\n\n        }\n    });\n}\n\nfunction validate_document(frm, evt) {\n    var rfnum = frm.doc.rfq_no;\n    console.log(rfnum);\n    frappe.call({\n        method: \"tqe_password_check\",\n        args: {\n            rfnum: rfnum,\n        },\n        async: false,\n        callback: function(notyetloggedin) {\n            var gt = JSON.stringify(notyetloggedin);\n            console.log(notyetloggedin.mode)\n            frm.set_value(\"procurement_method\",notyetloggedin.mode)\n            totalu = notyetloggedin.message[0].loggedinusers;\n            console.log(\"Number of signatories so far: \" + totalu);\n\n\n            if (totalu < 3) {\n                if (evt === \"btn\") {\n                    frm.set_query('item_name', function() {\n                        return {\n                            doctype: \"Item\",\n                            \"filters\": [\n                                [\"item_name\", \"=\", \"\"]\n                            ]\n                        }\n                    })\n                }\n\n                let d = new frappe.ui.Dialog({\n                    title: 'Please enter your Ad Hoc Committee password for tender/quotations opening',\n                    fields: [{\n                        label: 'User Password',\n                        fieldname: 'password1',\n                        fieldtype: 'Data'\n                    }],\n                    primary_action_label: 'Verify Passwords',\n                    primary_action(values) {\n                        console.log(values.password1);\n                        var pass1 = values.password1;\n                        return frappe.call({\n                            method: \"tqe_password_validation\",\n                            args: {\n                                password: pass1,\n                                refnum: rfnum,\n\n                            },\n                            callback: function(server_response) {\n                                console.log(\"ssssss\" + JSON.stringify(server_response), \"ddd\" + server_response)\n\n                            }\n                        });\n                        // server_action:;\n                        //  'client_action': '\n                        //d.hide();\n                    }\n                });\n                d.show();\n            } else { //Do what the button is supposed to do if totalu<3\n                if (evt === \"btn\") {\n\n                    var rf_qno = frm.doc.rfq_no;\n                    var item_n = frm.doc.item_name;\n                    if (rf_qno) {\n                        //\n\n\n                        ///\n\n                        frappe.call({\n                            method: \"frappe.client.get_list\",\n                            args: {\n                                parent: \"Request for Quotation\",\n                                doctype: \"Request for Quotation Item\",\n                                filters: [{\n                                    parent: frm.doc.rfq_no\n                                }],\n                                fields: [\"item_name\"]\n                            },\n                            callback: function(itemk) {\n                                var itemname = JSON.stringify(itemk);\n                                console.log(itemname);\n                                var itemArr = [];\n                                for (var i = 0; i < itemk.message.length; i++) {\n                                    itemArr.push(itemk.message[i].item_name);\n                                }\n                                frm.set_query('item_name', function() {\n                                    return {\n                                        doctype: \"Item\",\n                                        \"filters\": [\n                                            [\"item_name\", \"IN\", itemArr]\n                                        ]\n                                    };\n                                });\n                            }\n                        });\n                    } else {\n                        frappe.msgprint(\"Please select the Request for Quotation number\");\n                    }\n                }\n\n            }\n\n        }\n    })\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Budget",
  "modified": "2020-05-26 00:40:04.346855",
  "name": "Budget-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "var userdept =\"\";\nvar userid=\"\";\nfrappe.ui.form.on('Budget', {\n    onload: function(frm, cdt, cdn){\n        if(frm.doc.__islocal){\n            userid = frappe.user.name; //Get current logged in user\n            \n            frappe.db.get_value(\"Employee\", {user_id : userid}, 'department') .then(r => {\n                let values = r.message;\n                userdept = values.department;///Let us return all my rights on the console;\n               \n                 frappe.model.set_value(cdt, cdn, \"department\", userdept);\n               \n                console.log(\"Budget department is \"+userdept+\" and userid = \"+userid);\n            });\n        }else{\n            userdept = frm.doc.department;\n        }\n    },\n\trefresh: function(frm, cdt, cdn){\n\t     if(frm.doc.__islocal){\n    \t   frappe.model.set_value(cdt, cdn, \"budget_against\", \"Department\");\n    \t   frappe.model.set_value(cdt, cdn, \"department\", userdept);\n    \t    setTimeout(() => {\n    \t\t\tfrm.clear_custom_buttons();\n            }, 10);\n\t     }\n    }\n})"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Financial Year Setting",
  "modified": "2020-05-14 19:21:33.359519",
  "name": "Financial Year Setting-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "var row ={\"Quarter\":4,\"Semester\": 2,\"Trimester\":3}\nvar payload =[]\nvar rowdata ={}\nfrappe.ui.form.on('Financial Year Setting', {\n    divide_year_into:function(frm){\n        //alert(\"I selected this\"+frm.doc.divide_year_into)\n        var rowCount = frm.doc.financial_periods.length;\n        if(parseInt(rowCount)>0){\n            frm.doc.financial_periods.splice(0,rowCount);\n            frm.refresh_field(\"financial_periods\");\n            frappe.show_alert('Items Cleared: If any periods had been added below, they have been cleared. to pave way for ' +frm.doc.divide_year_into, 5);\n        }\n        var selected = frm.doc.divide_year_into;\n        var numrows = parseInt(row[selected]);\n        \n        frappe.show_alert(\"For \"+selected+\"s there are \"+numrows+\" divisions in a year\")\n        for(var i=0;i<numrows;i++){\n                var child = frm.add_child(\"financial_periods\");\n                var curr_id =i+1;\n                console.log(curr_id+\" is the current_id\")\n                child.period_name=  selected+\" \"+curr_id;\n                child.known_name=  selected+\" \"+curr_id;\n        }\n        console.log(JSON.stringify(payload))\n        frm.refresh_field(\"financial_periods\");\n        \n    }\n})"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Periodic Distribution",
  "modified": "2020-05-26 17:36:12.785312",
  "name": "Periodic Distribution-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Periodic Distribution', {\n    validate: function(frm){\n      var total =0.0;\n      for(var i=0;i<frm.doc.periodic_distribution_amounts.length;i++){\n          total+=frm.doc.periodic_distribution_amounts[i].amount;\n      }\n      if(parseInt(total)!==100){\n          frappe.throw(\"Sorry, please readjust your percentages to tally to 100%\")\n          frappe.validated=false;\n          return false;\n      }\n    },\n\tonload_post_render:function(frm){\n\t     if(frm.doc.__islocal  ){ \n\t         var company = frappe.defaults.get_user_default(\"company\")\n\t         frappe.call({\n                    method:\"frappe.client.get_list\",\n                    args: {\n                        parent: \"Financial Year Setting\",\n                        doctype:\"Financial Year Setting Period\",\n                        filters:[\n                                {parent: company}\n                            ],\n                        fields: [\"known_name\",\"idx\"],\n                        order_by: \"idx\",\n                    },\n                    callback: function(response){\n                        console.log(JSON.stringify(response))\n                        if(response.message.length>=1){\n                            var equal_percent  = 100/response.message.length\n                            for(var i=0;i<response.message.length;i++){\n                                var child = frm.add_child(\"periodic_distribution_amounts\");\n                                var curr_id =i+1;\n                                console.log(curr_id+\" is the current_id\")\n                                child.period_name=  response.message[i].known_name;\n                                child.amount= equal_percent;\n                                frm.refresh_field(\"periodic_distribution_amounts\");\n                            }\n                        }\n                    }\n            \t})\n            \n           \n\t     }\n\t}\n})"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Tender Quotation Scorecard",
  "modified": "2020-05-21 22:55:42.454727",
  "name": "Tender Quotation Scorecard-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Tender Quotation Scorecard', {\n    validate:function(frm){\n        var details = frm.doc.details;\n        var total =0.0;\n        for(var i=0;i<details.length;i++){\n            total += parseFloat(details[i].score)\n        }\n        if(parseInt(total) != 100){\n            frappe.throw(\"The totals percentages does not add up to 100%\\nTotals in table \"+total);\n            frappe.validated = false;\n            return false;\n        }\n    },\n    rfq_no:function(frm){\n       frappe.call('document_info', {\n            doctype: 'Request for Quotation',\n            docname: frm.doc.rfq_no\n        }).then(r => {\n             frm.doc.mode_of_procurement = r.message.mode_of_procurement;\n             refresh_field(\"mode_of_procurement\");\n            console.log(r);\n        });\n    },\n    refresh: function(frm){\n          if(!frm.doc.__islocal){\n               frm.set_df_property(\"load_from_existing_tenderquotation\", \"hidden\", true);\n          }else{\n             frm.set_df_property(\"load_from_existing_tenderquotation\", \"hidden\", false); \n          }\n    },\n    load_from_existing_tenderquotation:function(frm){\n        frappe.call('document_info', {\n            doctype: 'Tender Quotation Scorecard',\n            docname: frm.doc.load_from_existing_tenderquotation\n        }).then(r => {\n            console.log(r);\n            var numrows = frm.doc.details.length;\n            frm.doc.details.splice(0, numrows);\n            frm.refresh_field(\"details\");\n            var details_data = r.message.details;\n            //---\n            for(var i=0;i<details_data.length;i++){\n                var newrow =frm.add_child(\"details\");\n                newrow.attribute= details_data[i].attribute;\n                newrow.score= details_data[i].score;\n                newrow.remarks = details_data[i].remarks;\n            }\n            refresh_field(\"details\")\n        });\n    }\n    \n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Tender Quotation Award",
  "modified": "2020-05-22 00:52:40.338065",
  "name": "Tender Quotation Award-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Tender Quotation Award', {\n    validate:function(frm){\n       var reference = frm.doc.reference_number\n       if(reference==\"-\" || !reference || reference.length < 3){\n           frappe.throw(\"Invalid or null character in the reference field\");\n           frappe.validated = false;\n           return false;\n       }\n       var suppliers = frm.doc.suppliers\n       var count =0;\n       var award_status =\"\";\n       for(var j=0;j<suppliers.length;j++){ //COUNT THE NUMBER OF BIDDERS AWARDED, CAN'T(SHOULDN'T) BE MORE THAN ONE\n           award_status = suppliers[j].awarded_bidder\n           console.log(award_status)\n           if(award_status){\n              count+=1 \n              \n           }\n       }\n       if(count != 1){\n          frappe.throw(\"Sorry, you CANNOT have NONE or MORE THAN ONE awarded bidder\")\n          frappe.validated = false\n          return false\n       }\n    },\n    item_code:function(frm){\n               frappe.call('document_info', {\n                    doctype: 'Item',\n                    docname: frm.doc.item_code\n                }).then(r => {\n                     frm.doc.item_name = r.message.item_name;\n                     refresh_field(\"item_name\");\n                     console.log(r);\n                });\n    }\n\n})"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Tender Quotation Evaluation",
  "modified": "2020-05-26 22:47:05.181476",
  "name": "Tender Quotation Evaluation-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "\nfrappe.ui.form.on('Tender Quotation Evaluation', {\n\tonload:function(frm){\n\t \n\t},\n\trefresh: function(frm){\n\t    console.log(frm.doc.workflow_state)\n\t    var opening_status = frm.doc.opening_status;\n\t    if(frm.doc.opening_status!==\"-\"){ //TENDER OPENING SECTION REMARKS READONLY AND BUTTONS HIDDEN\n\t     frm.set_df_property(\"opening_report\", \"read_only\", frm.doc.__islocal ? 0 : 1);\n         frm.set_df_property(\"open_tenderquotation\", \"hidden\", frm.doc.__islocal ? 0 : 1);\n         frm.set_df_property(\"abort_process\", \"hidden\", frm.doc.__islocal ? 0 : 1);\n         frm.set_df_property(\"rfq_no\", \"read_only\", frm.doc.__islocal ? 0 : 1);\n         //\n\t    }\n\t    if(frm.doc.workflow_state===\"Pending Preliminary Evaluation\"){\n\t        console.log(\"I am at Preliminaries\")\n\t    } \n\t},\n\topen_tenderquotation:function(frm){\n\t    \n    \t if(!frm.doc.__islocal){\n    \t    if(frm.doc.opening_report.length<500){\n    \t        frappe.throw(\"You cannot open a tender without a comprehensive tender opening report not less than 300 words. Typed text: \"+frm.doc.opening_report)\n    \t    }\n    \t    else{\n        \t    frm.doc.workflow_state =\"Pending Preliminary Evaluation\"\n        \t    refresh_field(\"workflow_state\")\n        \t    frm.doc.opening_time = new Date( new Date().getTime());\n    \t        refresh_field(\"opening_time\");\n    \t        frm.doc.opening_status =\"opened\"\n    \t        refresh_field(\"opening_status\");\n    \t        frm.save();\n        \t    frm.refresh();\n    \t        \n    \t    }\n    \t}else{\n    \t    frappe.throw(\"Please save the document first\")\n    \t}\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Receipt",
  "modified": "2020-05-24 23:15:34.936405",
  "name": "Purchase Receipt-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    /*\n    \tonload(frm)\n\t{\n\t  setTimeout(() => {\n\t\t\tfrm.clear_custom_buttons();\n        }, 10);\n\t    \n\t},\n\trefresh(frm) {\n\t setTimeout(() => {\n\t\t\tfrm.clear_custom_buttons();\n        }, 10);\n\t}\n*/\n})"
 }
]